[{"F:\\REACT\\movie-app\\src\\Api\\Api.tsx":"1","F:\\REACT\\movie-app\\src\\App.test.tsx":"2","F:\\REACT\\movie-app\\src\\App.tsx":"3","F:\\REACT\\movie-app\\src\\components\\Common\\Card.tsx":"4","F:\\REACT\\movie-app\\src\\components\\Common\\Filter.tsx":"5","F:\\REACT\\movie-app\\src\\components\\Common\\HeroNav.tsx":"6","F:\\REACT\\movie-app\\src\\components\\Common\\HomePageCard.tsx":"7","F:\\REACT\\movie-app\\src\\components\\Common\\Loader.tsx":"8","F:\\REACT\\movie-app\\src\\components\\Common\\movieInfoToolTip.tsx":"9","F:\\REACT\\movie-app\\src\\components\\Common\\NoPesrson.tsx":"10","F:\\REACT\\movie-app\\src\\components\\Common\\Paginator.tsx":"11","F:\\REACT\\movie-app\\src\\components\\Common\\PeopleCard.tsx":"12","F:\\REACT\\movie-app\\src\\components\\Common\\Skeleton.tsx":"13","F:\\REACT\\movie-app\\src\\components\\Common\\SocialComp.tsx":"14","F:\\REACT\\movie-app\\src\\components\\Common\\Sort.tsx":"15","F:\\REACT\\movie-app\\src\\components\\Footer\\Footer.tsx":"16","F:\\REACT\\movie-app\\src\\components\\FullActorsList\\FullList.tsx":"17","F:\\REACT\\movie-app\\src\\components\\Helper\\allMedia.tsx":"18","F:\\REACT\\movie-app\\src\\components\\Helper\\crewstaff.tsx":"19","F:\\REACT\\movie-app\\src\\components\\Helper\\filterData.tsx":"20","F:\\REACT\\movie-app\\src\\components\\Helper\\mtchId.tsx":"21","F:\\REACT\\movie-app\\src\\components\\Home\\FreeToWatch\\FreeToWatch.tsx":"22","F:\\REACT\\movie-app\\src\\components\\Home\\FreeToWatch\\FreetToWatchNav.tsx":"23","F:\\REACT\\movie-app\\src\\components\\Home\\FreeToWatch\\Movies.tsx":"24","F:\\REACT\\movie-app\\src\\components\\Home\\FreeToWatch\\Tv.tsx":"25","F:\\REACT\\movie-app\\src\\components\\Home\\Hero.tsx":"26","F:\\REACT\\movie-app\\src\\components\\Home\\JoinToday\\JoinToday.tsx":"27","F:\\REACT\\movie-app\\src\\components\\Home\\LatestTrailers\\Trailers.tsx":"28","F:\\REACT\\movie-app\\src\\components\\Home\\LatestTrailers\\Videos.tsx":"29","F:\\REACT\\movie-app\\src\\components\\Home\\Movielist.tsx":"30","F:\\REACT\\movie-app\\src\\components\\Home\\MovielistContainer.tsx":"31","F:\\REACT\\movie-app\\src\\components\\Home\\Popular\\ForRent.tsx":"32","F:\\REACT\\movie-app\\src\\components\\Home\\Popular\\InTheater.tsx":"33","F:\\REACT\\movie-app\\src\\components\\Home\\Popular\\OnTv.tsx":"34","F:\\REACT\\movie-app\\src\\components\\Home\\Popular\\Popular.tsx":"35","F:\\REACT\\movie-app\\src\\components\\Home\\Popular\\Streaming.tsx":"36","F:\\REACT\\movie-app\\src\\components\\Home\\Tranding\\Today.tsx":"37","F:\\REACT\\movie-app\\src\\components\\Home\\Tranding\\TraidingNav.tsx":"38","F:\\REACT\\movie-app\\src\\components\\Home\\Tranding\\Tranding.tsx":"39","F:\\REACT\\movie-app\\src\\components\\Home\\Tranding\\Week.tsx":"40","F:\\REACT\\movie-app\\src\\components\\Home\\Upcoming\\Upcoming.tsx":"41","F:\\REACT\\movie-app\\src\\components\\MovieCard\\CardActors.tsx":"42","F:\\REACT\\movie-app\\src\\components\\MovieCard\\CardHeader.tsx":"43","F:\\REACT\\movie-app\\src\\components\\MovieCard\\CardInfo.tsx":"44","F:\\REACT\\movie-app\\src\\components\\MovieCard\\CardMedia\\CardMedia.tsx":"45","F:\\REACT\\movie-app\\src\\components\\MovieCard\\CardMedia\\CardMediaAll.tsx":"46","F:\\REACT\\movie-app\\src\\components\\MovieCard\\CardSocial\\CardSocial.tsx":"47","F:\\REACT\\movie-app\\src\\components\\MovieCard\\CardSocial\\CardSocialAll.tsx":"48","F:\\REACT\\movie-app\\src\\components\\MovieCard\\MovieCardContainer.tsx":"49","F:\\REACT\\movie-app\\src\\components\\MovieCard\\PopupTrailer.tsx":"50","F:\\REACT\\movie-app\\src\\components\\MovieCard\\Poster\\CardPoster.tsx":"51","F:\\REACT\\movie-app\\src\\components\\MovieCard\\Poster\\PosterStaffPage.tsx":"52","F:\\REACT\\movie-app\\src\\components\\MovieCard\\Poster\\StaffCard.tsx":"53","F:\\REACT\\movie-app\\src\\components\\MovieCard\\Poster\\StaffCardMovielist.tsx":"54","F:\\REACT\\movie-app\\src\\components\\MovieCard\\Poster\\StaffHeader.tsx":"55","F:\\REACT\\movie-app\\src\\components\\MovieCard\\Poster\\StaffKnowFor.tsx":"56","F:\\REACT\\movie-app\\src\\components\\MovieCard\\Recomandations\\CardRecomand.tsx":"57","F:\\REACT\\movie-app\\src\\components\\MovielistHeader\\MovielistHeader.tsx":"58","F:\\REACT\\movie-app\\src\\components\\Movies\\NowPlaying.tsx":"59","F:\\REACT\\movie-app\\src\\components\\Movies\\Popular.tsx":"60","F:\\REACT\\movie-app\\src\\components\\Movies\\TopRated.tsx":"61","F:\\REACT\\movie-app\\src\\components\\Movies\\Upcoming.tsx":"62","F:\\REACT\\movie-app\\src\\components\\NaigationBar\\NavBar.tsx":"63","F:\\REACT\\movie-app\\src\\components\\People\\Popular.tsx":"64","F:\\REACT\\movie-app\\src\\components\\SearchResultsPage\\ResultsPage.tsx":"65","F:\\REACT\\movie-app\\src\\components\\SearchResultsPage\\SearchResults.tsx":"66","F:\\REACT\\movie-app\\src\\components\\SearchResultsPage\\SearchResultsItems.tsx":"67","F:\\REACT\\movie-app\\src\\components\\SearchResultsPage\\SerachResult\\Collections.tsx":"68","F:\\REACT\\movie-app\\src\\components\\SearchResultsPage\\SerachResult\\Movie.tsx":"69","F:\\REACT\\movie-app\\src\\components\\SearchResultsPage\\SerachResult\\Person.tsx":"70","F:\\REACT\\movie-app\\src\\components\\SearchResultsPage\\SerachResult\\Tvs.tsx":"71","F:\\REACT\\movie-app\\src\\components\\Store\\Reducers\\HomePageReducer.tsx":"72","F:\\REACT\\movie-app\\src\\components\\Store\\Reducers\\LangReducer.tsx":"73","F:\\REACT\\movie-app\\src\\components\\Store\\Reducers\\MovieListReducer.tsx":"74","F:\\REACT\\movie-app\\src\\components\\Store\\Reducers\\PeopleReducer.tsx":"75","F:\\REACT\\movie-app\\src\\components\\Store\\Reducers\\SearchReducer.tsx":"76","F:\\REACT\\movie-app\\src\\components\\Store\\Selectors\\HomePageSelector.tsx":"77","F:\\REACT\\movie-app\\src\\components\\Store\\Selectors\\LangSelector.tsx":"78","F:\\REACT\\movie-app\\src\\components\\Store\\Selectors\\MovieSelector.tsx":"79","F:\\REACT\\movie-app\\src\\components\\Store\\Selectors\\PeopleSelector.tsx":"80","F:\\REACT\\movie-app\\src\\components\\Store\\Selectors\\SearchSelector.tsx":"81","F:\\REACT\\movie-app\\src\\components\\Store\\store.tsx":"82","F:\\REACT\\movie-app\\src\\components\\Tv\\AiringToday.tsx":"83","F:\\REACT\\movie-app\\src\\components\\Tv\\OnTv.tsx":"84","F:\\REACT\\movie-app\\src\\components\\Tv\\PopularTv.tsx":"85","F:\\REACT\\movie-app\\src\\components\\Tv\\TopRatedTv.tsx":"86","F:\\REACT\\movie-app\\src\\Hoc\\withHeaderFooter.tsx":"87","F:\\REACT\\movie-app\\src\\Hoc\\withmovies.tsx":"88","F:\\REACT\\movie-app\\src\\index.tsx":"89","F:\\REACT\\movie-app\\src\\react-app-env.d.ts":"90","F:\\REACT\\movie-app\\src\\reportWebVitals.ts":"91","F:\\REACT\\movie-app\\src\\setupTests.ts":"92","F:\\REACT\\movie-app\\src\\Types\\Types.tsx":"93","F:\\REACT\\movie-app\\src\\TvCard\\CardActors.tsx":"94","F:\\REACT\\movie-app\\src\\TvCard\\CardInfo.tsx":"95","F:\\REACT\\movie-app\\src\\TvCard\\CardMedia\\CardMedia.tsx":"96","F:\\REACT\\movie-app\\src\\TvCard\\CardMedia\\CardMediaAll.tsx":"97","F:\\REACT\\movie-app\\src\\TvCard\\CardSocial\\CardSocial.tsx":"98","F:\\REACT\\movie-app\\src\\TvCard\\CardSocial\\CardSocialAll.tsx":"99","F:\\REACT\\movie-app\\src\\TvCard\\PopupTrailer.tsx":"100","F:\\REACT\\movie-app\\src\\TvCard\\Recomandations\\CardRecomand.tsx":"101","F:\\REACT\\movie-app\\src\\TvCard\\TvCardContainer.tsx":"102","F:\\REACT\\movie-app\\src\\TvCard\\TvCardHeader.tsx":"103","F:\\REACT\\movie-app\\src\\components\\Store\\Reducers\\TvReducer.tsx":"104","F:\\REACT\\movie-app\\src\\components\\Store\\Selectors\\Tvselector.tsx":"105","F:\\REACT\\movie-app\\src\\TvCard\\PosterTv\\PosterStaffPage.tsx":"106","F:\\REACT\\movie-app\\src\\TvCard\\PosterTv\\StaffCard.tsx":"107","F:\\REACT\\movie-app\\src\\TvCard\\PosterTv\\StaffCardMovielist.tsx":"108","F:\\REACT\\movie-app\\src\\TvCard\\PosterTv\\StaffHeader.tsx":"109","F:\\REACT\\movie-app\\src\\TvCard\\PosterTv\\StaffKnowFor.tsx":"110","F:\\REACT\\movie-app\\src\\TvCard\\PosterTv\\CardPosterTv.tsx":"111","F:\\REACT\\movie-app\\src\\TvCard\\CurrentSeason\\CurrentSeason.tsx":"112","F:\\REACT\\movie-app\\src\\components\\Common\\SearchSlide.tsx":"113"},{"size":14246,"mtime":1610552066811,"results":"114","hashOfConfig":"115"},{"size":273,"mtime":1603735837181,"results":"116","hashOfConfig":"115"},{"size":2632,"mtime":1610545046013,"results":"117","hashOfConfig":"115"},{"size":2283,"mtime":1609240272359,"results":"118","hashOfConfig":"115"},{"size":3069,"mtime":1608712675930,"results":"119","hashOfConfig":"115"},{"size":2055,"mtime":1610345111712,"results":"120","hashOfConfig":"115"},{"size":1852,"mtime":1608731733835,"results":"121","hashOfConfig":"115"},{"size":277,"mtime":1603831657498,"results":"122","hashOfConfig":"115"},{"size":1111,"mtime":1606568079604,"results":"123","hashOfConfig":"115"},{"size":223,"mtime":1608490211006,"results":"124","hashOfConfig":"115"},{"size":591,"mtime":1610345111713,"results":"125","hashOfConfig":"115"},{"size":893,"mtime":1609332352159,"results":"126","hashOfConfig":"115"},{"size":281,"mtime":1608124977223,"results":"127","hashOfConfig":"115"},{"size":1141,"mtime":1610449364422,"results":"128","hashOfConfig":"115"},{"size":2553,"mtime":1608715609073,"results":"129","hashOfConfig":"115"},{"size":3286,"mtime":1609263280391,"results":"130","hashOfConfig":"115"},{"size":167,"mtime":1605600955270,"results":"131","hashOfConfig":"115"},{"size":110,"mtime":1605629075347,"results":"132","hashOfConfig":"115"},{"size":400,"mtime":1610368231263,"results":"133","hashOfConfig":"115"},{"size":385,"mtime":1606329705645,"results":"134","hashOfConfig":"115"},{"size":129,"mtime":1604692652048,"results":"135","hashOfConfig":"115"},{"size":835,"mtime":1607514632391,"results":"136","hashOfConfig":"115"},{"size":1266,"mtime":1610345111714,"results":"137","hashOfConfig":"115"},{"size":1398,"mtime":1610345111766,"results":"138","hashOfConfig":"115"},{"size":1395,"mtime":1610350225997,"results":"139","hashOfConfig":"115"},{"size":2202,"mtime":1610345111768,"results":"140","hashOfConfig":"115"},{"size":1424,"mtime":1608048609618,"results":"141","hashOfConfig":"115"},{"size":2578,"mtime":1609154958884,"results":"142","hashOfConfig":"115"},{"size":1263,"mtime":1607955031074,"results":"143","hashOfConfig":"115"},{"size":2762,"mtime":1607514956738,"results":"144","hashOfConfig":"115"},{"size":2471,"mtime":1610345111769,"results":"145","hashOfConfig":"115"},{"size":1472,"mtime":1610345111769,"results":"146","hashOfConfig":"115"},{"size":1212,"mtime":1610345111770,"results":"147","hashOfConfig":"115"},{"size":1205,"mtime":1610345111770,"results":"148","hashOfConfig":"115"},{"size":1082,"mtime":1610345111780,"results":"149","hashOfConfig":"115"},{"size":1207,"mtime":1610345111781,"results":"150","hashOfConfig":"115"},{"size":1535,"mtime":1610613397054,"results":"151","hashOfConfig":"115"},{"size":1290,"mtime":1608020144943,"results":"152","hashOfConfig":"115"},{"size":790,"mtime":1608816078629,"results":"153","hashOfConfig":"115"},{"size":1532,"mtime":1610613442446,"results":"154","hashOfConfig":"115"},{"size":1413,"mtime":1610345111782,"results":"155","hashOfConfig":"115"},{"size":2842,"mtime":1610457397350,"results":"156","hashOfConfig":"115"},{"size":2271,"mtime":1605727259637,"results":"157","hashOfConfig":"115"},{"size":1765,"mtime":1605778822768,"results":"158","hashOfConfig":"115"},{"size":3223,"mtime":1610607777117,"results":"159","hashOfConfig":"115"},{"size":177,"mtime":1605774584840,"results":"160","hashOfConfig":"115"},{"size":3013,"mtime":1610552491449,"results":"161","hashOfConfig":"115"},{"size":181,"mtime":1605612537536,"results":"162","hashOfConfig":"115"},{"size":4134,"mtime":1610614391519,"results":"163","hashOfConfig":"115"},{"size":1452,"mtime":1610552349362,"results":"164","hashOfConfig":"115"},{"size":6654,"mtime":1610551844847,"results":"165","hashOfConfig":"115"},{"size":1954,"mtime":1606838930879,"results":"166","hashOfConfig":"115"},{"size":3992,"mtime":1606988826172,"results":"167","hashOfConfig":"115"},{"size":1689,"mtime":1606377127346,"results":"168","hashOfConfig":"115"},{"size":1838,"mtime":1606838715375,"results":"169","hashOfConfig":"115"},{"size":33241,"mtime":1609847209451,"results":"170","hashOfConfig":"115"},{"size":1442,"mtime":1610566258801,"results":"171","hashOfConfig":"115"},{"size":186,"mtime":1603797459626,"results":"172","hashOfConfig":"115"},{"size":2204,"mtime":1610566424792,"results":"173","hashOfConfig":"115"},{"size":2238,"mtime":1610566381992,"results":"174","hashOfConfig":"115"},{"size":2210,"mtime":1610566424792,"results":"175","hashOfConfig":"115"},{"size":2183,"mtime":1610566424793,"results":"176","hashOfConfig":"115"},{"size":16249,"mtime":1610641184923,"results":"177","hashOfConfig":"115"},{"size":1676,"mtime":1609847059891,"results":"178","hashOfConfig":"115"},{"size":3497,"mtime":1609846973748,"results":"179","hashOfConfig":"115"},{"size":3672,"mtime":1608496214019,"results":"180","hashOfConfig":"115"},{"size":2582,"mtime":1609846922674,"results":"181","hashOfConfig":"115"},{"size":1932,"mtime":1609846799406,"results":"182","hashOfConfig":"115"},{"size":2024,"mtime":1609846769807,"results":"183","hashOfConfig":"115"},{"size":1906,"mtime":1609846736076,"results":"184","hashOfConfig":"115"},{"size":2028,"mtime":1609846753820,"results":"185","hashOfConfig":"115"},{"size":10121,"mtime":1610566872908,"results":"186","hashOfConfig":"115"},{"size":2393,"mtime":1610345111889,"results":"187","hashOfConfig":"115"},{"size":6638,"mtime":1610565550344,"results":"188","hashOfConfig":"115"},{"size":4580,"mtime":1609857721821,"results":"189","hashOfConfig":"115"},{"size":5783,"mtime":1609857853887,"results":"190","hashOfConfig":"115"},{"size":1360,"mtime":1610345111890,"results":"191","hashOfConfig":"115"},{"size":231,"mtime":1610345111891,"results":"192","hashOfConfig":"115"},{"size":880,"mtime":1610360816358,"results":"193","hashOfConfig":"115"},{"size":527,"mtime":1609245616075,"results":"194","hashOfConfig":"115"},{"size":815,"mtime":1608299328841,"results":"195","hashOfConfig":"115"},{"size":1033,"mtime":1610360991019,"results":"196","hashOfConfig":"115"},{"size":2200,"mtime":1610566571639,"results":"197","hashOfConfig":"115"},{"size":2133,"mtime":1610566571639,"results":"198","hashOfConfig":"115"},{"size":2206,"mtime":1610566571639,"results":"199","hashOfConfig":"115"},{"size":2193,"mtime":1610566571638,"results":"200","hashOfConfig":"115"},{"size":317,"mtime":1605168845041,"results":"201","hashOfConfig":"115"},{"size":1010,"mtime":1610347935248,"results":"202","hashOfConfig":"115"},{"size":735,"mtime":1608815546157,"results":"203","hashOfConfig":"115"},{"size":41,"mtime":1603793689170,"results":"204","hashOfConfig":"115"},{"size":426,"mtime":1603735837181,"results":"205","hashOfConfig":"115"},{"size":241,"mtime":1603735837181,"results":"206","hashOfConfig":"115"},{"size":13453,"mtime":1610447758250,"results":"207","hashOfConfig":"115"},{"size":3079,"mtime":1610371899936,"results":"208","hashOfConfig":"115"},{"size":2042,"mtime":1610552163546,"results":"209","hashOfConfig":"115"},{"size":3164,"mtime":1610553395095,"results":"210","hashOfConfig":"115"},{"size":177,"mtime":1610348614365,"results":"211","hashOfConfig":"115"},{"size":2913,"mtime":1610553553803,"results":"212","hashOfConfig":"115"},{"size":181,"mtime":1610348598676,"results":"213","hashOfConfig":"115"},{"size":1448,"mtime":1610553361183,"results":"214","hashOfConfig":"115"},{"size":1427,"mtime":1610553423296,"results":"215","hashOfConfig":"115"},{"size":4316,"mtime":1610614391519,"results":"216","hashOfConfig":"115"},{"size":2271,"mtime":1610348456959,"results":"217","hashOfConfig":"115"},{"size":5650,"mtime":1610446667034,"results":"218","hashOfConfig":"115"},{"size":661,"mtime":1610446718402,"results":"219","hashOfConfig":"115"},{"size":1984,"mtime":1610349760988,"results":"220","hashOfConfig":"115"},{"size":4001,"mtime":1610349816634,"results":"221","hashOfConfig":"115"},{"size":1686,"mtime":1610349821309,"results":"222","hashOfConfig":"115"},{"size":1838,"mtime":1610348532152,"results":"223","hashOfConfig":"115"},{"size":33260,"mtime":1610349955950,"results":"224","hashOfConfig":"115"},{"size":6495,"mtime":1610373360308,"results":"225","hashOfConfig":"115"},{"size":1721,"mtime":1610440564471,"results":"226","hashOfConfig":"115"},{"size":2817,"mtime":1610649398309,"results":"227","hashOfConfig":"115"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1rs8fux",{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"232","messages":"233","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"234"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"237","messages":"238","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"239"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"242"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"255","messages":"256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"261","messages":"262","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"263"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"266","messages":"267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"268","messages":"269","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"270"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"273"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"276"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"281","messages":"282","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"283"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"286"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"289"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"292","messages":"293","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"294"},{"filePath":"295","messages":"296","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"297","messages":"298","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"299","messages":"300","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"301"},{"filePath":"302","messages":"303","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"304"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"307"},{"filePath":"308","messages":"309","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"310"},{"filePath":"311","messages":"312","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"313","messages":"314","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"315"},{"filePath":"316","messages":"317","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"318"},{"filePath":"319","messages":"320","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"321","messages":"322","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"323","messages":"324","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"325"},{"filePath":"326","messages":"327","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"328"},{"filePath":"329","messages":"330","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"331"},{"filePath":"332","messages":"333","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"334","messages":"335","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"336"},{"filePath":"337","messages":"338","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"339"},{"filePath":"340","messages":"341","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"342","messages":"343","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"344"},{"filePath":"345","messages":"346","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"347","messages":"348","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"349","messages":"350","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"351"},{"filePath":"352","messages":"353","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"354"},{"filePath":"355","messages":"356","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"357","messages":"358","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"359","messages":"360","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"361","messages":"362","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"363"},{"filePath":"364","messages":"365","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"366"},{"filePath":"367","messages":"368","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"369","messages":"370","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"371","messages":"372","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"373","messages":"374","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"375"},{"filePath":"376","messages":"377","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"378","messages":"379","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"380","messages":"381","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"382"},{"filePath":"383","messages":"384","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"385","messages":"386","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"387","messages":"388","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"389","messages":"390","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"391","messages":"392","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"393","messages":"394","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"395","messages":"396","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"397","messages":"398","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"399","messages":"400","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"401"},{"filePath":"402","messages":"403","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"404"},{"filePath":"405","messages":"406","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"407","messages":"408","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"409"},{"filePath":"410","messages":"411","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"412"},{"filePath":"413","messages":"414","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"415","messages":"416","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"417","messages":"418","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"419","messages":"420","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"421","messages":"422","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"423","messages":"424","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"425","messages":"426","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"427","messages":"428","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"429","messages":"430","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"431","messages":"432","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"433","messages":"434","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"435","messages":"436","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"437","messages":"438","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"439","messages":"440","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"441","messages":"442","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"443","messages":"444","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"445","messages":"446","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"447","messages":"448","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"449","messages":"450","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"451"},{"filePath":"452","messages":"453","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"454"},{"filePath":"455","messages":"456","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"457","messages":"458","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"459"},{"filePath":"460","messages":"461","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"462","messages":"463","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"464"},{"filePath":"465","messages":"466","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"467","messages":"468","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"469","messages":"470","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"471","messages":"472","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"473","messages":"474","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"475","messages":"476","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"477","messages":"478","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"479","messages":"480","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"481","messages":"482","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"363"},{"filePath":"483","messages":"484","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"485"},{"filePath":"486","messages":"487","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"488"},{"filePath":"489","messages":"490","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"491"},{"filePath":"492","messages":"493","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"F:\\REACT\\movie-app\\src\\Api\\Api.tsx",[],"F:\\REACT\\movie-app\\src\\App.test.tsx",[],"F:\\REACT\\movie-app\\src\\App.tsx",["494"],"import React from \"react\";\r\nimport MovielistContainer from \"./components/Home/MovielistContainer\";\r\nimport { Switch, Route } from \"react-router-dom\";\r\nimport MovieCardContainer from \"./components/MovieCard/MovieCardContainer\";\r\nimport withMovies from \"./Hoc/withmovies\";\r\nimport WithHeaderFooter from \"./Hoc/withHeaderFooter\";\r\nimport FullList from \"./components/FullActorsList/FullList\";\r\nimport CardSocialAll from \"./components/MovieCard/CardSocial/CardSocialAll\";\r\nimport CardMediaAll from \"./components/MovieCard/CardMedia/CardMediaAll\";\r\nimport PosterStaffPage from \"./components/MovieCard/Poster/PosterStaffPage\";\r\nimport ResultsPage from \"./components/SearchResultsPage/ResultsPage\";\r\nimport NowPlaying from \"./components/Movies/NowPlaying\";\r\nimport Popular from \"./components/Movies/Popular\";\r\nimport Upcoming from \"./components/Movies/Upcoming\";\r\nimport TopRated from \"./components/Movies/TopRated\";\r\nimport PopularTv from \"./components/Tv/PopularTv\";\r\nimport AiringToday from \"./components/Tv/AiringToday\";\r\nimport OnTv from \"./components/Tv/OnTv\";\r\nimport TopRatedTv from \"./components/Tv/TopRatedTv\";\r\nimport PopularPeople from \"./components/People/Popular\";\r\nimport TvCardContainer from \"./TvCard/TvCardContainer\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <WithHeaderFooter>\r\n        <Switch>\r\n          <Route exact path=\"/\" component={MovielistContainer} />\r\n          <Route path=\"/movie-card/:id\" component={MovieCardContainer} />\r\n          <Route path=\"/tv-card/:id\" component={TvCardContainer} />\r\n\r\n          <Route exact path=\"/posterstaff/:id\" component={PosterStaffPage} />\r\n\r\n          <Route path=\"/actorslist/\" component={FullList} />\r\n          <Route exact path=\"/allreview/\" component={CardSocialAll} />\r\n          <Route exact path=\"/allmedia/\" component={CardMediaAll} />\r\n          <Route exact path=\"/sreachresults/\" component={ResultsPage} />\r\n          <Route exact path=\"/movies/popular\" component={Popular} />\r\n          <Route exact path=\"/movies/nowplaying\" component={NowPlaying} />\r\n          <Route exact path=\"/movies/upcoming\" component={Upcoming} />\r\n          <Route exact path=\"/movies/toprated\" component={TopRated} />\r\n          <Route exact path=\"/tv/popular\" component={PopularTv} />\r\n          <Route exact path=\"/tv/airingtoday\" component={AiringToday} />\r\n          <Route exact path=\"/tv/ontv\" component={OnTv} />\r\n          <Route exact path=\"/tv/toprated\" component={TopRatedTv} />\r\n          <Route exact path=\"/people/popular\" component={PopularPeople} />\r\n        </Switch>\r\n      </WithHeaderFooter>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","F:\\REACT\\movie-app\\src\\components\\Common\\Card.tsx",[],"F:\\REACT\\movie-app\\src\\components\\Common\\Filter.tsx",["495"],"import React, { useEffect, useState } from \"react\";\r\nimport { FaChevronRight } from \"react-icons/fa\";\r\nimport { FaChevronDown } from \"react-icons/fa\";\r\nimport DayPickerInput from \"react-day-picker/DayPickerInput\";\r\nimport \"react-day-picker/lib/style.css\";\r\nimport { BiCalendarEvent } from \"react-icons/bi\";\r\nimport { AppStateType } from \"../Store/store\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { genresSelector } from \"../Store/Selectors/MovieSelector\";\r\nimport { requestGenres } from \"../Store/Reducers/MovieListReducer\";\r\n\r\nconst Filter = () => {\r\n  const [openSort, setOpenSort] = useState(false);\r\n  const [selectedDate, setSelectedDate] = useState<undefined | any>(undefined);\r\n  const [keyword, setKeyword] = useState<string>(\"\");\r\n\r\n  const moviegenres = useSelector((state: AppStateType) =>\r\n    genresSelector(state)\r\n  );\r\n  const dispach = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispach(requestGenres());\r\n  }, []);\r\n\r\n  const showSort = () => {\r\n    setOpenSort(!openSort);\r\n  };\r\n\r\n  const handleDayChange = (day: any) => {\r\n    setSelectedDate(day);\r\n  };\r\n\r\n  const handaleKeyword = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setKeyword(e.target.value);\r\n  };\r\n\r\n  const date = new Date(selectedDate).toLocaleDateString();\r\n\r\n  //console.log(date.toLocaleDateString());\r\n  //console.log(moviegenres);\r\n  console.log(keyword);\r\n  console.log(date)\r\n\r\n  return (\r\n    <div className=\"filter\">\r\n      <div className=\"filter__heading\" onClick={showSort}>\r\n        <h3>Filter</h3>\r\n        {openSort ? <FaChevronDown /> : <FaChevronRight />}\r\n      </div>\r\n      {openSort ? (\r\n        <div className=\"filter__body\">\r\n          <div className=\"filter__body__date\">\r\n            <span className=\"heading\">Release Dates</span>\r\n            <div className=\"from\">\r\n              <span>from</span>\r\n              <DayPickerInput onDayChange={handleDayChange} />\r\n              <span className=\"icon\">\r\n                <BiCalendarEvent />\r\n              </span>\r\n            </div>\r\n            <div className=\"to\">\r\n              <span>to</span>\r\n              <DayPickerInput\r\n                value={\"1/12/2021\"}\r\n                onDayChange={handleDayChange}\r\n              />\r\n              <span className=\"icon\">\r\n                <BiCalendarEvent />\r\n              </span>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"filter__body__genres\">\r\n            <span className=\"heading\">Genres</span>\r\n            <div>\r\n              {moviegenres.map((movie) => (\r\n                <span key={movie.id}>{movie.name}</span>\r\n              ))}\r\n            </div>\r\n          </div>\r\n          <div className=\"filter__body__keywords\">\r\n            <span className=\"heading\">Keywords</span>\r\n            <div>\r\n\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Filter by keywords...\"\r\n              onChange={handaleKeyword}\r\n              />\r\n              </div>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Filter;\r\n","F:\\REACT\\movie-app\\src\\components\\Common\\HeroNav.tsx",["496","497","498","499"],"import React, { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { requestPopularMovies } from \"../Store/Reducers/HomePageReducer\";\r\nimport { selectedSelector } from \"../Store/Selectors/HomePageSelector\";\r\nimport { AppStateType } from \"../Store/store\";\r\n\r\ntype PropsType = {\r\n  show: string;\r\n  showValue: (value: string) => void;\r\n};\r\n\r\nconst HeroNav: React.FC<PropsType> = ({ show, showValue}) => {\r\n  const dispatch = useDispatch();\r\n\r\n\r\n  const selectPage = () => {\r\n    dispatch(requestPopularMovies(1));\r\n  };\r\n\r\n  return (\r\n    <ul className=\"herowrapnav\">\r\n      <li className=\"herowrapnav__item\">\r\n        <button\r\n          onClick={() => {\r\n            showValue(\"stream\");\r\n            selectPage();\r\n          }}\r\n          className={`btn btn--heronav ${\r\n            show === \"stream\" ? \"btn--heroactive\" : \"\"\r\n          }`}\r\n        >\r\n          <span>streming</span>\r\n        </button>\r\n      </li>\r\n      <li className=\"herowrapnav__item\">\r\n        <button\r\n          onClick={() => {\r\n            showValue(\"onTv\");\r\n            selectPage();\r\n          }}\r\n          className={`btn btn--heronav ${\r\n            show === \"onTv\" ? \"btn--heroactive\" : \"\"\r\n          }`}\r\n        >\r\n          <span>on tv</span>\r\n        </button>\r\n      </li>\r\n      <li className=\"herowrapnav__item\">\r\n        <button\r\n          onClick={() => {\r\n            showValue(\"rent\");\r\n            selectPage();\r\n          }}\r\n          className={`btn btn--heronav ${\r\n            show === \"rent\" ? \"btn--heroactive\" : \"\"\r\n          }`}\r\n        >\r\n          <span>for ret</span>\r\n        </button>\r\n      </li>\r\n      <li className=\"herowrapnav__item\">\r\n        <button\r\n          onClick={() => {\r\n            showValue(\"theater\");\r\n            selectPage();\r\n          }}\r\n          className={`btn btn--heronav ${\r\n            show === \"theater\" ? \"btn--heroactive\" : \"\"\r\n          }`}\r\n        >\r\n          <span>in theaters</span>\r\n        </button>\r\n      </li>\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default HeroNav;\r\n","F:\\REACT\\movie-app\\src\\components\\Common\\HomePageCard.tsx",[],"F:\\REACT\\movie-app\\src\\components\\Common\\Loader.tsx",[],"F:\\REACT\\movie-app\\src\\components\\Common\\movieInfoToolTip.tsx",[],"F:\\REACT\\movie-app\\src\\components\\Common\\NoPesrson.tsx",[],"F:\\REACT\\movie-app\\src\\components\\Common\\Paginator.tsx",[],"F:\\REACT\\movie-app\\src\\components\\Common\\PeopleCard.tsx",[],"F:\\REACT\\movie-app\\src\\components\\Common\\Skeleton.tsx",[],"F:\\REACT\\movie-app\\src\\components\\Common\\SocialComp.tsx",[],"F:\\REACT\\movie-app\\src\\components\\Common\\Sort.tsx",[],"F:\\REACT\\movie-app\\src\\components\\Footer\\Footer.tsx",["500","501","502"],"import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nconst Footer = () => {\r\n  const slideToTop = () => {\r\n    window.scrollTo({\r\n      top: 0,\r\n      behavior: 'smooth',\r\n    });\r\n  };\r\n\r\n  return (\r\n    <footer className=\"footer\">\r\n      <div className=\"footerwrapp\">\r\n        <div className=\"footerwrapp__movies\">\r\n          <h3>Movies</h3>\r\n          <ul className=\"list\">\r\n            <li className=\"list__item\">\r\n              <Link\r\n                to=\"/movies/popular\"\r\n                className=\"list__link\"\r\n                onClick={slideToTop}\r\n              >\r\n                Popular\r\n              </Link>\r\n            </li>\r\n            <li className=\"list__item\">\r\n              <Link to=\"/movies/nowplaying\" className=\"list__link\" onClick={slideToTop}>\r\n                Now Playing\r\n              </Link>\r\n            </li>\r\n            <li className=\"list__item\">\r\n              <Link to=\"/movies/upcoming\" className=\"list__link\" onClick={slideToTop}>\r\n                Upcoming\r\n              </Link>\r\n            </li>\r\n            <li className=\"list__item\">\r\n              <Link to=\"/movies/toprated\" className=\"list__link\" onClick={slideToTop}>\r\n                Top Rated\r\n              </Link>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n        <div className=\"footerwrapp__tv\">\r\n          <h3>TV Shows</h3>\r\n          <ul className=\"list\">\r\n            <li className=\"list__item\">\r\n              <Link to=\"/tv/popular\" className=\"list__link\" onClick={slideToTop}>\r\n                Popular\r\n              </Link>\r\n            </li>\r\n            <li className=\"list__item\">\r\n              <Link to=\"/tv/airingtoday\" className=\"list__link\" onClick={slideToTop}>\r\n                Airing Today\r\n              </Link>\r\n            </li>\r\n            <li className=\"list__item\">\r\n              <Link to=\"/tv/ontv\" className=\"list__link\" onClick={slideToTop}>\r\n                On Tv\r\n              </Link>\r\n            </li>\r\n            <li className=\"list__item\">\r\n              <Link to=\"/tv/toprated\" className=\"list__link\" onClick={slideToTop}>\r\n                Top Rated\r\n              </Link>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n        <div className=\"footerwrapp__people\">\r\n          <h3>People</h3>\r\n          <ul className=\"list\">\r\n            <li className=\"list__item\" onClick={slideToTop}>\r\n              <Link to='/people/popular' className=\"list__link\" >\r\n                Popular People\r\n              </Link>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n        <div className=\"footerwrapp__more\">\r\n          <h3>More</h3>\r\n          <ul className=\"list\">\r\n            <li className=\"list__item\">\r\n              <a href=\"#\" className=\"list__link\">\r\n                Discutions\r\n              </a>\r\n            </li>\r\n            <li className=\"list__item\">\r\n              <a href=\"#\" className=\"list__link\">\r\n                Leaderboard\r\n              </a>\r\n            </li>\r\n            <li className=\"list__item\">\r\n              <a href=\"#\" className=\"list__link\">\r\n                Suport\r\n              </a>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n      <Link to=\"/\" className=\"logo\">\r\n        MOVIE-APP\r\n      </Link>\r\n    </footer>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","F:\\REACT\\movie-app\\src\\components\\FullActorsList\\FullList.tsx",[],"F:\\REACT\\movie-app\\src\\components\\Helper\\allMedia.tsx",[],"F:\\REACT\\movie-app\\src\\components\\Helper\\crewstaff.tsx",["503","504"],"export const crewStaff = (props:any,name: string, arr:[{}]) => {\r\n    props.map((i: { job: string; }) => {\r\n      if (i.job === name) {\r\n        arr.push(i);\r\n      }\r\n    });\r\n  };\r\nexport const crewStaffTV = (props:any,name: string, arr:[{}]) => {\r\n    props.map((i: { known_for_department: string; }) => {\r\n      if (i.known_for_department === name) {\r\n        arr.push(i);\r\n      }\r\n    });\r\n  };","F:\\REACT\\movie-app\\src\\components\\Helper\\filterData.tsx",["505","506"],"\r\n\r\nexport const filterData=(arr1:any,arr2:any,value:string)=>{\r\n    arr1.filter((item:any) =>{\r\n        if(item.media_type === value){\r\n          arr2.push(item)\r\n        }\r\n    })\r\n}\r\n\r\n\r\nexport const filterDepartament=(arr1:any,arr2:any,value:string)=>{\r\n    arr1.filter((item:any) => {\r\n        if(item.department === value){\r\n           arr2.push(item)\r\n        }\r\n    })\r\n}\r\n\r\n\r\n","F:\\REACT\\movie-app\\src\\components\\Helper\\mtchId.tsx",["507"],"export const matchIdFunc = (array: any[], value: any) => {\r\n  return array.filter((item: { id: any }) => item.id == value);\r\n};\r\n","F:\\REACT\\movie-app\\src\\components\\Home\\FreeToWatch\\FreeToWatch.tsx",[],"F:\\REACT\\movie-app\\src\\components\\Home\\FreeToWatch\\FreetToWatchNav.tsx",[],"F:\\REACT\\movie-app\\src\\components\\Home\\FreeToWatch\\Movies.tsx",["508"],"import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { requestNowPlaying } from \"../../Store/Reducers/HomePageReducer\";\r\nimport {\r\n  fetchingSelector,\r\n  nowPlayingSelector,\r\n} from \"../../Store/Selectors/HomePageSelector\";\r\nimport { AppStateType } from \"../../Store/store\";\r\nimport Card from \"../../Common/HomePageCard\";\r\nimport Skeleton from \"../../Common/Skeleton\";\r\n\r\nconst Movies = () => {\r\n  const nowPlayingMovies = useSelector((state: AppStateType) =>\r\n    nowPlayingSelector(state)\r\n  );\r\n  const fetching = useSelector((state: AppStateType) =>\r\n    fetchingSelector(state)\r\n  );\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    dispatch(requestNowPlaying(1));\r\n  }, []);\r\n  return (\r\n    <div className=\"cardwrapp\">\r\n      {nowPlayingMovies?.results.map((movie) =>\r\n        fetching ? (\r\n          <Skeleton key={movie.id}/>\r\n        ) : (\r\n          <Link to={`movie-card/${movie.id}`} key={movie.id}>\r\n            <Card\r\n              poster={movie.poster_path}\r\n              title={movie.title}\r\n              realese={movie.release_date}\r\n              voteAverage={movie.vote_average}\r\n              name={movie.name}\r\n              firstAirDate={movie.first_air_date}\r\n            />\r\n          </Link>\r\n        )\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Movies;\r\n","F:\\REACT\\movie-app\\src\\components\\Home\\FreeToWatch\\Tv.tsx",["509"],"import React from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Card from \"../../Common/HomePageCard\";\r\nimport Skeleton from \"../../Common/Skeleton\";\r\nimport { requestNowTvPlaying } from \"../../Store/Reducers/HomePageReducer\";\r\nimport { fetchingSelector, nowTvPlayingSelector } from \"../../Store/Selectors/HomePageSelector\";\r\nimport { AppStateType } from \"../../Store/store\";\r\n\r\nconst Tv = () => {\r\n  const fetching = useSelector((state: AppStateType) =>\r\n    fetchingSelector(state)\r\n  );\r\n  const nowTvPlaying = useSelector((state: AppStateType) =>\r\n    nowTvPlayingSelector(state)\r\n  );\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(requestNowTvPlaying(1));\r\n  }, []);\r\n\r\n  console.log(nowTvPlaying)\r\n\r\n  return (\r\n    <div className=\"cardwrapp\">\r\n      {nowTvPlaying?.results.map((movie:any)=> \r\n      fetching?<Skeleton key={movie.id}/>:\r\n        <Link to={`tv-card/${movie.id}`} key={movie.id}>\r\n          <Card key={movie.id}\r\n            poster={movie.poster_path}\r\n            title={movie.name}\r\n            realese={movie.first_air_date}\r\n            voteAverage={movie.vote_average}\r\n            name={movie.name}\r\n            firstAirDate={movie.first_air_date}\r\n          />\r\n         </Link> \r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Tv;\r\n","F:\\REACT\\movie-app\\src\\components\\Home\\Hero.tsx",["510"],"import React, { useEffect, useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Redirect } from \"react-router\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { PopularType } from \"../../Types/Types\";\r\nimport {\r\n  requestSearchMovie,\r\n  requestSearchQuery,\r\n} from \"../Store/Reducers/SearchReducer\";\r\nimport { currentPagesSelector } from \"../Store/Selectors/SearchSelector\";\r\nimport { AppStateType } from \"../Store/store\";\r\n\r\ntype PropsType = {\r\n  bgPopular: Array<PopularType> | undefined;\r\n};\r\n\r\nconst Hero: React.FC<PropsType> = ({ bgPopular=[] }) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const [searchMovie, setSearchMovie] = useState(\"\");\r\n  const currentPage = useSelector((state:AppStateType)=>currentPagesSelector(state))\r\n\r\n  \r\n\r\n  const handldleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setSearchMovie(e.target.value);\r\n    dispatch(requestSearchQuery(e.target.value));\r\n    <Redirect to=\"/sreachresults\" />;\r\n  };\r\n\r\n  const baseUrl = \"https://image.tmdb.org/t/p/w500\";\r\n\r\n  const bgImages: Array<string> = bgPopular.map(\r\n    (item) => `${baseUrl}${item.backdrop_path}`\r\n  );\r\n\r\n  const randomImg = bgImages[Math.floor(Math.random() * bgImages.length)];\r\n\r\n  return (\r\n    <div\r\n      className=\"herowrapp__container\"\r\n      style={{\r\n        background: `linear-gradient(to left, rgb(18 65 123 / 65%), rgb(29 101 162)), url(${randomImg}) center center / cover`,\r\n      }}\r\n    >\r\n      <div className=\"hero_heading\">\r\n        <h1 className=\"hero_heading__big\">Welcome.</h1>\r\n        <h3 className=\"hero_heading__subheading\">\r\n          Millions of movies, TV shows and people to discover. Explore now.\r\n        </h3>\r\n      </div>\r\n      <div className=\"searchinput\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Search for a movie, tv show, person......\"\r\n          value={searchMovie}\r\n          onChange={handldleChange}\r\n        />\r\n        <Link\r\n          to=\"/sreachresults\"\r\n          className=\"btn btn--hero\"\r\n          onClick={() => dispatch(requestSearchMovie(searchMovie,currentPage))}\r\n        >\r\n          Search\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Hero;\r\n","F:\\REACT\\movie-app\\src\\components\\Home\\JoinToday\\JoinToday.tsx",[],"F:\\REACT\\movie-app\\src\\components\\Home\\LatestTrailers\\Trailers.tsx",["511","512"],"import React, {useEffect, useState} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {\r\n  homeVideosSelector,\r\n  popularSelector,\r\n} from '../../Store/Selectors/HomePageSelector';\r\nimport {AppStateType} from '../../Store/store';\r\nimport Video from './Videos';\r\nimport {FaPlay} from 'react-icons/fa';\r\nimport {PopularType} from '../../../Types/Types';\r\nimport {requestTrailers} from '../../Store/Reducers/HomePageReducer';\r\n\r\nconst Trailers = () => {\r\n  const [bg, setBg] = useState<PopularType>();\r\n  const [openModal, setOpenModal] = useState(false);\r\n  const popular = useSelector((state: AppStateType) => popularSelector(state));\r\n  const trailers = useSelector((state: AppStateType) =>\r\n    homeVideosSelector(state)\r\n  );\r\n  const dispatch = useDispatch();\r\n\r\n  const checkIds = (valueId: number) => {\r\n    popular?.results.find((item) => {\r\n      if (item.id === valueId) {\r\n        setBg(item);\r\n      }\r\n    });\r\n  };\r\n\r\n  const closeModal = () => {\r\n    setOpenModal(false);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"trailerswrapp\"\r\n      style={{\r\n        backgroundImage: `url(https://image.tmdb.org/t/p/w500${bg?.backdrop_path})`,\r\n      }}\r\n    >\r\n      <div className=\"videos\">\r\n        <Video\r\n          trailers={trailers}\r\n          openModal={openModal}\r\n          closeModal={closeModal}\r\n        />\r\n      </div>\r\n      <div className=\"trailerswrapp__substrate\">\r\n        <h2 className=\"trailerswrapp__substrate__heading\">Latest Trailers</h2>\r\n        <div className=\"videowrap\">\r\n          {popular?.results.map((item) => (\r\n            <div\r\n              className=\"container\"\r\n              key={item.id}\r\n              onMouseEnter={() => checkIds(item.id)}\r\n            >\r\n              <div className=\"container__img\">\r\n                <img\r\n                  src={`https://image.tmdb.org/t/p/w500${item.backdrop_path}`}\r\n                  alt=\"poster\"\r\n                />\r\n                <button\r\n                  className=\"btn btn--play\"\r\n                  onClick={() => {\r\n                    dispatch(requestTrailers(item.id));\r\n                    setOpenModal(true);\r\n                  }}\r\n                >\r\n                  <FaPlay />\r\n                </button>\r\n              </div>\r\n              <div className=\"container__title\">\r\n                <span>{item.title}</span>\r\n                <br />\r\n                <span>Realese Date : {item.release_date}</span>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Trailers;\r\n","F:\\REACT\\movie-app\\src\\components\\Home\\LatestTrailers\\Videos.tsx",[],"F:\\REACT\\movie-app\\src\\components\\Home\\Movielist.tsx",[],"F:\\REACT\\movie-app\\src\\components\\Home\\MovielistContainer.tsx",["513","514","515","516"],"import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nimport {\r\n  MovieListType,\r\n  PopularObjectType,\r\n  PopularType,\r\n  VideoType,\r\n} from '../../Types/Types';\r\nimport {requestMovieList} from '../Store/Reducers/MovieListReducer';\r\n\r\nimport {\r\n  isFetchingSelector,\r\n  moviesSelector,\r\n} from '../Store/Selectors/MovieSelector';\r\nimport {AppStateType} from '../Store/store';\r\nimport MovieList from './Movielist';\r\nimport HeroSection from './Hero';\r\nimport Popular from './Popular/Popular';\r\nimport {\r\n  //homeVideosSelector,\r\n  popularSelector,\r\n  selectedSelector,\r\n} from '../Store/Selectors/HomePageSelector';\r\nimport {\r\n  requestPopularMovies,\r\n  //requestHomeMovies,\r\n} from '../Store/Reducers/HomePageReducer';\r\nimport FreeToWatch from './FreeToWatch/FreeToWatch';\r\nimport Trailers from './LatestTrailers/Trailers';\r\nimport Tranding from './Tranding/Tranding';\r\nimport JoinToday from './JoinToday/JoinToday';\r\nimport Upcoming from './Upcoming/Upcoming';\r\n\r\ntype MapStateToPropsType = {\r\n  movieList: Array<MovieListType>;\r\n  isFetching: boolean;\r\n  movies?: any;\r\n  popularMovies: PopularObjectType | undefined | null;\r\n  //homeVideo: Array<VideoType>;\r\n};\r\n\r\ntype MapDispatchPropsType = {\r\n  requestMovieList: () => void;\r\n  requestPopularMovies: (pagenr: any) => void;\r\n};\r\n\r\ntype OwnPropsType = {};\r\n\r\ntype PropsType = MapStateToPropsType &\r\n  MapDispatchPropsType &\r\n  OwnPropsType &\r\n  AppStateType;\r\n\r\nclass MovielistContainer extends Component<PropsType> {\r\n  componentDidMount() {\r\n    this.props.requestMovieList();\r\n    this.props.requestPopularMovies(1);\r\n  }\r\n\r\n  render() {\r\n    // console.log(this.props);\r\n    return (\r\n      <>\r\n        <HeroSection bgPopular={this.props.popularMovies?.results} />\r\n        <Popular />\r\n        <FreeToWatch />\r\n        <Trailers />\r\n        <Tranding />\r\n        <JoinToday />\r\n        <Upcoming />\r\n\r\n        {/* <MovieList\r\n          movieList={this.props.movieList}\r\n          isFetching={this.props.isFetching}\r\n        /> */}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport let mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n  return {\r\n    movieList: moviesSelector(state),\r\n    isFetching: isFetchingSelector(state),\r\n    popularMovies: popularSelector(state),\r\n  };\r\n};\r\n\r\nexport default connect<\r\n  MapStateToPropsType,\r\n  MapDispatchPropsType,\r\n  OwnPropsType,\r\n  AppStateType\r\n>(mapStateToProps, {requestMovieList, requestPopularMovies})(\r\n  MovielistContainer\r\n);\r\n","F:\\REACT\\movie-app\\src\\components\\Home\\Popular\\ForRent.tsx",["517","518","519"],"import React, { FC } from \"react\";\r\nimport { PropsMovieComponentstype } from \"./Popular\";\r\nimport Card from \"../../Common/HomePageCard\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { AppStateType } from \"../../Store/store\";\r\nimport { fetchingSelector,  popularSelector } from \"../../Store/Selectors/HomePageSelector\";\r\nimport { useSelector } from \"react-redux\";\r\nimport Skeleton from '../../Common/Skeleton';\r\nimport { PopularType } from \"../../../Types/Types\";\r\n\r\n\r\nconst ForRent= () => {\r\n  const fetching = useSelector((state: AppStateType) =>\r\n    fetchingSelector(state)\r\n  );\r\n  const forRent = useSelector((state:AppStateType)=>popularSelector(state))\r\n\r\n  const forRentCopy= forRent?.results;\r\n\r\n\r\n  console.log(forRentCopy);\r\n  const random=(arr:any)=>{\r\n  return  [...arr].reverse()\r\n  }\r\n\r\n  random(forRentCopy)\r\n  return (\r\n    <>\r\n      <div className=\"cardwrapp\">\r\n        {random(forRentCopy).map((movie) =>\r\n          fetching ? (<Skeleton key={movie.id}/>\r\n          ) : (\r\n            <Link to={`movie-card/${movie.id}`} key={movie.id}>\r\n              <Card\r\n                poster={movie.poster_path}\r\n                title={movie.title}\r\n                realese={movie.release_date}\r\n                voteAverage={movie.vote_average}\r\n                name={movie.name}\r\n                firstAirDate={movie.first_air_date}\r\n              />\r\n            </Link>\r\n          )\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ForRent;\r\n","F:\\REACT\\movie-app\\src\\components\\Home\\Popular\\InTheater.tsx",["520","521"],"import React, { FC } from \"react\";\r\nimport { PropsMovieComponentstype } from \"./Popular\";\r\nimport Card from \"../../Common/HomePageCard\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { fetchingSelector, traidingsSelector } from \"../../Store/Selectors/HomePageSelector\";\r\nimport { AppStateType } from \"../../Store/store\";\r\nimport Skeleton from \"../../Common/Skeleton\";\r\n\r\nconst InTheater = () => {\r\n  const fetching = useSelector((state: AppStateType) =>\r\n    fetchingSelector(state)\r\n  );\r\n  const theater = useSelector((state:AppStateType)=>traidingsSelector(state))\r\n\r\n  return (\r\n    <div className=\"cardwrapp\">\r\n      {theater.map((movie) =>\r\n        fetching ? (\r\n          <Skeleton key={movie.id}/>\r\n        ) : (\r\n          <Link to={`movie-card/${movie.id}`} key={movie.id}>\r\n            <Card\r\n              poster={movie.poster_path}\r\n              title={movie.title}\r\n              realese={movie.release_date}\r\n              voteAverage={movie.vote_average}\r\n              name={movie.name}\r\n              firstAirDate={movie.first_air_date}\r\n            />\r\n          </Link>\r\n        )\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InTheater;\r\n","F:\\REACT\\movie-app\\src\\components\\Home\\Popular\\OnTv.tsx",["522","523"],"import React, { FC } from \"react\";\r\nimport { PropsMovieComponentstype } from \"./Popular\";\r\nimport Card from \"../../Common/HomePageCard\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Skeleton from \"../../Common/Skeleton\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { fetchingSelector, nowPlayingSelector } from \"../../Store/Selectors/HomePageSelector\";\r\nimport { AppStateType } from \"../../Store/store\";\r\n\r\nconst OnTv = () => {\r\n  const fetching = useSelector((state: AppStateType) =>\r\n    fetchingSelector(state)\r\n  );\r\n  const onTv = useSelector((state:AppStateType)=>nowPlayingSelector(state))\r\n  return (\r\n    <div className=\"cardwrapp\">\r\n      {onTv?.results.map((movie) =>\r\n        fetching ? (\r\n          <Skeleton key={movie.id}/>\r\n        ) : (\r\n          <Link to={`movie-card/${movie.id}`} key={movie.id}>\r\n            <Card\r\n              poster={movie.poster_path}\r\n              title={movie.title}\r\n              realese={movie.release_date}\r\n              voteAverage={movie.vote_average}\r\n              name={movie.name}\r\n              firstAirDate={movie.first_air_date}\r\n            />\r\n          </Link>\r\n        )\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default OnTv;\r\n","F:\\REACT\\movie-app\\src\\components\\Home\\Popular\\Popular.tsx",[],"F:\\REACT\\movie-app\\src\\components\\Home\\Popular\\Streaming.tsx",["524","525","526"],"import React, { FC } from \"react\";\r\nimport { PropsMovieComponentstype } from \"./Popular\";\r\nimport Card from \"../../Common/HomePageCard\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Skeleton from '../../Common/Skeleton';\r\nimport { useSelector } from \"react-redux\";\r\nimport { fetchingSelector, popularSelector } from \"../../Store/Selectors/HomePageSelector\";\r\nimport { AppStateType } from \"../../Store/store\";\r\nimport { PopularType } from \"../../../Types/Types\";\r\n\r\n\r\n\r\nconst Streaming = () => {\r\n  const fetching = useSelector((state: AppStateType) =>\r\n  fetchingSelector(state)\r\n);\r\nconst popular = useSelector((state:AppStateType)=>popularSelector(state))\r\n  return (\r\n    <div className=\"cardwrapp\">\r\n      {popular?.results.map((movie) => \r\n      fetching?<Skeleton key={movie.id}/>:\r\n        <Link to={`movie-card/${movie.id}`} key={movie.id}>\r\n          <Card  \r\n            poster={movie.poster_path}\r\n            title={movie.title}\r\n            realese={movie.release_date}\r\n            voteAverage={movie.vote_average}\r\n            name={movie.name}\r\n            firstAirDate={movie.first_air_date}\r\n          />\r\n        </Link>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Streaming;\r\n","F:\\REACT\\movie-app\\src\\components\\Home\\Tranding\\Today.tsx",["527"],"import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { requestTraidings } from \"../../Store/Reducers/HomePageReducer\";\r\nimport {\r\n  fetchingSelector,\r\n  traidingsSelector,\r\n} from \"../../Store/Selectors/HomePageSelector\";\r\nimport { AppStateType } from \"../../Store/store\";\r\nimport Card from \"../../Common/HomePageCard\";\r\nimport Skeleton from \"../../Common/Skeleton\";\r\n\r\nconst Today = () => {\r\n  const fetching = useSelector((state: AppStateType) =>\r\n    fetchingSelector(state)\r\n  );\r\n\r\n  const traidings = useSelector((state: AppStateType) =>\r\n    traidingsSelector(state)\r\n  );\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    dispatch(requestTraidings(\"day\"));\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"cardwrapp\">\r\n      {traidings.map((movie) =>\r\n        fetching ? (\r\n          <Skeleton key={movie.id} />\r\n        ) : (\r\n          <Link\r\n            to={\r\n              movie.media_type === \"movie\"\r\n                ? `movie-card/${movie.id}`\r\n                : `tv-card/${movie.id}`\r\n            }\r\n            key={movie.id}\r\n          >\r\n            <Card\r\n              poster={movie.poster_path}\r\n              title={movie.title}\r\n              name={movie.name}\r\n              firstAirDate={movie.first_air_date}\r\n              realese={movie.release_date}\r\n              voteAverage={movie.vote_average}\r\n            />\r\n          </Link>\r\n        )\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Today;\r\n","F:\\REACT\\movie-app\\src\\components\\Home\\Tranding\\TraidingNav.tsx",[],"F:\\REACT\\movie-app\\src\\components\\Home\\Tranding\\Tranding.tsx",[],"F:\\REACT\\movie-app\\src\\components\\Home\\Tranding\\Week.tsx",["528"],"import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { requestTraidings } from \"../../Store/Reducers/HomePageReducer\";\r\nimport {\r\n  fetchingSelector,\r\n  traidingsSelector,\r\n} from \"../../Store/Selectors/HomePageSelector\";\r\nimport { AppStateType } from \"../../Store/store\";\r\nimport Card from \"../../Common/HomePageCard\";\r\nimport Skeleton from \"../../Common/Skeleton\";\r\n\r\nconst Week = () => {\r\n  const fetching = useSelector((state: AppStateType) =>\r\n    fetchingSelector(state)\r\n  );\r\n  const traidings = useSelector((state: AppStateType) =>\r\n    traidingsSelector(state)\r\n  );\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    dispatch(requestTraidings(\"week\"));\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"cardwrapp\">\r\n      {traidings.map((movie) =>\r\n        fetching ? (\r\n          <Skeleton key={movie.id} />\r\n        ) : (\r\n          <Link\r\n            to={\r\n              movie.media_type === \"movie\"\r\n                ? `movie-card/${movie.id}`\r\n                : `tv-card/${movie.id}`\r\n            }\r\n            key={movie.id}\r\n          >\r\n            <Card\r\n              poster={movie.poster_path}\r\n              title={movie.title}\r\n              realese={movie.release_date}\r\n              voteAverage={movie.vote_average}\r\n              name={movie.name}\r\n              firstAirDate={movie.first_air_date}\r\n            />\r\n          </Link>\r\n        )\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Week;\r\n","F:\\REACT\\movie-app\\src\\components\\Home\\Upcoming\\Upcoming.tsx",["529"],"import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { requestUpComing } from \"../../Store/Reducers/HomePageReducer\";\r\nimport { fetchingSelector, upComingSelector } from \"../../Store/Selectors/HomePageSelector\";\r\nimport { AppStateType } from \"../../Store/store\";\r\nimport Card from \"../../Common/HomePageCard\";\r\nimport Skeleton from \"../../Common/Skeleton\";\r\n\r\nconst Upcoming = () => {\r\n  const upComing = useSelector((state: AppStateType) =>\r\n    upComingSelector(state)\r\n  );\r\n  const fetching = useSelector((state: AppStateType) =>\r\n  fetchingSelector(state)\r\n);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(requestUpComing(1));\r\n  }, []);\r\n\r\n//console.log(upComing?.results)\r\n\r\n  return (\r\n    <div className=\"upcomingwrapp\">\r\n      <h2>Upcoming</h2>\r\n      <div className=\"cardwrapp\">\r\n      {upComing?.results.map((movie) => fetching?<Skeleton key={movie.id}/>:\r\n        <Link to={`movie-card/${movie.id}`} key={movie.id}>\r\n          <Card\r\n            poster={movie.poster_path}\r\n            title={movie.title}\r\n            realese={movie.release_date}\r\n            voteAverage={movie.vote_average}\r\n            name={movie.name}\r\n            firstAirDate={movie.first_air_date}\r\n          />\r\n        </Link>\r\n      )}\r\n    </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Upcoming;\r\n","F:\\REACT\\movie-app\\src\\components\\MovieCard\\CardActors.tsx",["530"],"import React from \"react\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CardMedia from \"@material-ui/core/CardMedia\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport ArrowForwardRoundedIcon from \"@material-ui/icons/ArrowForwardRounded\";\r\nimport NoPhoto from '../../assets/noImage.png';\r\n\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { CreditsType } from \"../../Types/Types\";\r\n\r\ntype PropsType = {\r\n  credits: CreditsType | null;\r\n};\r\n\r\n\r\n\r\nconst CardActors = ({ credits }: PropsType) => {\r\n  const actors = credits?.cast.slice(0, 8);\r\n  return (\r\n    <div className=\"actorsWrapp\">\r\n      <h3 className=\"actorsWrapp__heading\">Top Billed Cast</h3>\r\n      <div className=\"actorsWrapp__cardsWrapp\">\r\n        <div className=\"actorsWrapp__cardsWrapp-cards\">\r\n          {actors?.map((actor) => (\r\n            <Link to=\"/actorslist\" className=\"actorslist\" key={actor.id}>\r\n              <Card className='cardStyle'>\r\n                <CardActionArea>\r\n                  <CardMedia\r\n                    component=\"img\"\r\n                    alt=\"actor photo\"\r\n                    height=\"150\"\r\n                    image={actor.profile_path===null?`${NoPhoto}`:`https://image.tmdb.org/t/p/w500/${actor.profile_path}`}\r\n                    //title=\"Contemplative Reptile\"\r\n                  />\r\n                  <CardContent>\r\n                    <Typography\r\n                      gutterBottom\r\n                      variant=\"h5\"\r\n                      component=\"h2\"\r\n                      className=\"name1\"\r\n                    >\r\n                      {actor.name}\r\n                    </Typography>\r\n                    <Typography\r\n                      variant=\"body2\"\r\n                      color=\"textSecondary\"\r\n                      component=\"p\"\r\n                      className=\"name2\"\r\n                      style={{\r\n                        fontSize: \"1.5rem\",\r\n                        textOverflow: \"ellipsis\",\r\n                        overflow: \"hidden\",\r\n                        whiteSpace: \"nowrap\",\r\n                      }}\r\n                    >\r\n                      {actor.character}\r\n                    </Typography>\r\n                  </CardContent>\r\n                </CardActionArea>\r\n                <CardActions></CardActions>\r\n              </Card>\r\n            </Link>\r\n          ))}\r\n          <Link to=\"/actorslist\">\r\n            View More <ArrowForwardRoundedIcon />\r\n          </Link>\r\n        </div>\r\n      </div>\r\n      <h4>\r\n        <Link to=\"/actorslist\">Full Cast & Crew</Link>\r\n      </h4>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardActors;\r\n","F:\\REACT\\movie-app\\src\\components\\MovieCard\\CardHeader.tsx",[],"F:\\REACT\\movie-app\\src\\components\\MovieCard\\CardInfo.tsx",["531"],"import React from \"react\";\r\nimport { KeywordsType, MovieDetailsType } from \"../../Types/Types\";\r\n\r\ntype PropType = {\r\n  details: MovieDetailsType | null;\r\n  keywords: Array<KeywordsType>;\r\n};\r\n\r\nconst CardInfo = ({ details, keywords }: PropType) => {\r\n  return (\r\n    <div className=\"cardInfoWrapp\">\r\n      <ul className=\"cardInfoList\">\r\n        <li className=\"cardInfoList__item\">\r\n          <span className=\"cardInfoList__item__header\">Status</span>\r\n          <br />\r\n          <span className=\"cardInfoList__item__info\">{details?.status}</span>\r\n        </li>\r\n        <li className=\"cardInfoList__item\">\r\n          <span className=\"cardInfoList__item__header\">Original Language</span>\r\n          <br />\r\n          <span className=\"cardInfoList__item__info\">\r\n            {details?.spoken_languages.map((l) => l.name)}\r\n          </span>\r\n        </li>\r\n        <li className=\"cardInfoList__item\">\r\n          <span className=\"cardInfoList__item__header\">Budget</span>\r\n          <br />\r\n          <span className=\"cardInfoList__item__info\">{`$${details?.budget}`}</span>\r\n        </li>\r\n        <li className=\"cardInfoList__item\">\r\n          <span className=\"cardInfoList__item__header\">Revenue</span>\r\n          <br />\r\n          <span className=\"cardInfoList__item__info\">{`$${details?.revenue}`}</span>\r\n        </li>\r\n      </ul>\r\n      <div className=\"keywordsWrapp\">\r\n        <h4>Keywords</h4>\r\n        <ul className=\"keywordsWrapp__list\">\r\n          {keywords.map((k) => (\r\n            <li className=\"keywordsWrapp__item\" key={k.id}>\r\n              <a href=\"#\" className=\"keywordsWrapp__link\">\r\n                {k.name}\r\n              </a>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardInfo;\r\n","F:\\REACT\\movie-app\\src\\components\\MovieCard\\CardMedia\\CardMedia.tsx",["532","533","534","535"],"import React from 'react';\r\nimport ArrowForwardRoundedIcon from '@material-ui/icons/ArrowForwardRounded';\r\nimport PlayCircleFilledWhiteRoundedIcon from '@material-ui/icons/PlayCircleFilledWhiteRounded';\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport {MovieDetailsType, VideoType} from '../../../Types/Types';\r\nimport {allMedia} from '../../Helper/allMedia';\r\n\r\ntype PropsType = {\r\n  details: MovieDetailsType | null;\r\n  videos: Array<VideoType>;\r\n};\r\n\r\nconst CardMedia = ({details, videos=[]}: PropsType) => {\r\n  const allImg: Array<string> = [];\r\n  allMedia(\r\n    details?.belongs_to_collection === null\r\n      ? ''\r\n      : details?.belongs_to_collection.poster_path,\r\n    details?.poster_path,\r\n    allImg\r\n  );\r\n  allMedia(\r\n    details?.belongs_to_collection === null\r\n      ? ''\r\n      : details?.belongs_to_collection.backdrop_path,\r\n    details?.backdrop_path,\r\n    allImg\r\n  );\r\n  const addPrefix = allImg.map(\r\n    (item: string) => `https://image.tmdb.org/t/p/w500${item}`\r\n  );\r\n  const noImg = addPrefix.filter((i) => {\r\n    if (i.includes('.jpg')) return i;\r\n  });\r\n\r\n  return (\r\n    <div className=\"mediaWrapp\">\r\n      <div className=\"mediaWrapp__header\">\r\n        <h3 className=\"mediaWrapp__header-heading\">Media</h3>\r\n        <ul className=\"mediaWrapp__header-list\">\r\n          <li className=\"mediaWrapp__header-item\">\r\n            <Link\r\n              to=\"/allmedia\"\r\n              className=\"mediaWrapp__header-link mediaWrapp__header-link--active\"\r\n            >\r\n              All Media <span>{addPrefix.length + videos.length}</span>\r\n            </Link>\r\n          </li>\r\n          <li className=\"mediaWrapp__header-item\">\r\n            <a href=\"#\" className=\"mediaWrapp__header-link\">\r\n              Videos <span>{videos.length}</span>\r\n            </a>\r\n          </li>\r\n          <li className=\"mediaWrapp__header-item\">\r\n            <a href=\"#\" className=\"mediaWrapp__header-link\">\r\n              Backdrops <span>{addPrefix.slice(0, 2).length}</span>\r\n            </a>\r\n          </li>\r\n          <li className=\"mediaWrapp__header-item\">\r\n            <a href=\"#\" className=\"mediaWrapp__header-link\">\r\n              Posters <span>{addPrefix.slice(2, 4).length}</span>\r\n            </a>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n      <div className=\"mediaWrapp__wrapper\">\r\n        <div className=\"mediaWrapp__wrapper-media\">\r\n          {noImg.reverse().map((item: string, index: number) => (\r\n            <img src={item} alt=\"poster\" key={index} />\r\n          ))}\r\n          {videos.slice(0, 2).map((video) => (\r\n            <div className=\"mediaWrapp__wrapper-videolink\" key={video.id}>\r\n              {' '}\r\n              <a\r\n                className=\"mediaWrapp__wrapper-videolink-link\"\r\n                href={`https://www.youtube.com/watch?v=${video.key}`}\r\n                rel=\"noopener noreferrer\"\r\n                target=\"_blank\"\r\n              >\r\n                <PlayCircleFilledWhiteRoundedIcon />\r\n              </a>\r\n            </div>\r\n          ))}\r\n          <div>\r\n            <Link to=\"/allmedia\">\r\n              View More <ArrowForwardRoundedIcon />\r\n            </Link>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardMedia;\r\n","F:\\REACT\\movie-app\\src\\components\\MovieCard\\CardMedia\\CardMediaAll.tsx",[],"F:\\REACT\\movie-app\\src\\components\\MovieCard\\CardSocial\\CardSocial.tsx",["536"],"import React from \"react\";\r\nimport StarRateRoundedIcon from \"@material-ui/icons/StarRateRounded\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport { makeStyles, createStyles, Theme } from \"@material-ui/core/styles\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { ResultsType } from \"../../../Types/Types\";\r\n\r\ntype PropsType = {\r\n  reviews: Array<ResultsType>;\r\n};\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      display: \"flex\",\r\n      \"& > *\": {\r\n        margin: theme.spacing(1),\r\n      },\r\n    },\r\n    small: {\r\n      width: theme.spacing(3),\r\n      height: theme.spacing(3),\r\n    },\r\n    large: {\r\n      width: theme.spacing(7),\r\n      height: theme.spacing(7),\r\n    },\r\n  })\r\n);\r\nconst CardMedia = ({ reviews =[]}: PropsType) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className=\"socialWrapp\">\r\n      <div className=\"socialWrapp__header\">\r\n        <h3 className=\"socialWrapp__header-heading\">Social</h3>\r\n        <ul className=\"socialWrapp__header-list\">\r\n          <li className=\"socialWrapp__header-item\">\r\n            <Link\r\n              to=\"/allreview\"\r\n              className=\"socialWrapp__header-link socialWrapp__header-link--active\"\r\n            >\r\n              Reviews{\" \"}\r\n              <span>\r\n                {reviews.length === undefined\r\n                  ? \"NO REVIEWS YET\"\r\n                  : reviews.length}\r\n              </span>\r\n            </Link>\r\n          </li>\r\n          <li className=\"socialWrapp__header-item\">\r\n            <a href=\"#\" className=\"socialWrapp__header-link\">\r\n              Discussions <span>6</span>\r\n            </a>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n      {reviews.slice(0, 1).map((review) => (\r\n        <div className=\"socialWrapp__reviews\" key={review.id}>\r\n          <div className=\"socialWrapp__reviews-header\">\r\n            <Avatar style={{ marginRight: \"15px\" }} className={classes.large} />\r\n            <div>\r\n              <a href={review.url} target=\"_blank\" rel=\"noreferrer\">\r\n                <h3>\r\n                  A review by {review.author}{\" \"}\r\n                  <span>\r\n                    <StarRateRoundedIcon style={{ fontSize: 20 }} />\r\n                    6.0\r\n                  </span>\r\n                </h3>\r\n              </a>\r\n              <span>\r\n                Written by <b>{review.author}</b> on 4 April 2017\r\n              </span>\r\n            </div>\r\n          </div>\r\n          <div className=\"socialWrapp__reviews-body\">\r\n            <p>\r\n              {`${review.content.slice(0, 300)}...`}{\" \"}\r\n              <a\r\n                href={review.url}\r\n                target=\"_blank\"\r\n                rel=\"noreferrer\"\r\n                className=\"socialWrapp__reviews-link\"\r\n              >\r\n                read the rest\r\n              </a>\r\n            </p>\r\n          </div>\r\n        </div>\r\n      ))}\r\n      <h4>\r\n        <Link to=\"/allreview/\">Read All Reviews</Link>\r\n      </h4>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardMedia;\r\n","F:\\REACT\\movie-app\\src\\components\\MovieCard\\CardSocial\\CardSocialAll.tsx",[],"F:\\REACT\\movie-app\\src\\components\\MovieCard\\MovieCardContainer.tsx",[],"F:\\REACT\\movie-app\\src\\components\\MovieCard\\PopupTrailer.tsx",["537"],"import React from \"react\";\r\nimport { VideoType } from \"../../Types/Types\";\r\nimport {CgClose} from 'react-icons/cg'\r\n \r\ntype StateType = {\r\n  playTrailer: boolean;\r\n};\r\n\r\ntype PropsType = {\r\n  videos: Array<VideoType>;\r\n  playState: StateType;\r\n  closePlay: () => void;\r\n};\r\n\r\nconst PopupTrailer = ({ videos =[], playState, closePlay }: PropsType) => {\r\n  const trailer = videos.filter((v) => v.type === \"Trailer\");\r\n  const key = trailer.find((t) => {\r\n   if (t.name.includes(\"Trailer\")) {\r\n      return t.key;\r\n    }\r\n  });\r\n\r\n  const width = window.innerWidth;\r\n\r\n  \r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className={\r\n          playState.playTrailer\r\n            ? \"popuptrailer popuptrailer--show\"\r\n            : \"popuptrailer\"\r\n        }\r\n      >\r\n        \r\n        <div className=\"popuptrailer__videobox \">\r\n        <div className=\"popuptrailer__header\">\r\n          <button onClick={closePlay} className=\"btn btn--close\">\r\n            <CgClose/>\r\n          </button>\r\n        </div>\r\n          <iframe\r\n            width=\"100%\"\r\n            height={width>900?'700':'500'}\r\n            src={`https://www.youtube.com/embed/${key?.key}`}\r\n            frameBorder=\"0\"\r\n            allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\r\n            allowFullScreen\r\n            title='movie trailer'\r\n          ></iframe>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PopupTrailer;\r\n","F:\\REACT\\movie-app\\src\\components\\MovieCard\\Poster\\CardPoster.tsx",["538","539","540","541","542","543"],"import React from \"react\";\r\n\r\nimport FormatListBulletedRoundedIcon from \"@material-ui/icons/FormatListBulletedRounded\";\r\nimport BookmarkRoundedIcon from \"@material-ui/icons/BookmarkRounded\";\r\nimport FavoriteRoundedIcon from \"@material-ui/icons/FavoriteRounded\";\r\nimport StarRoundedIcon from \"@material-ui/icons/StarRounded\";\r\nimport PlayArrowRoundedIcon from \"@material-ui/icons/PlayArrowRounded\";\r\nimport { buildStyles, CircularProgressbar } from \"react-circular-progressbar\";\r\nimport \"react-circular-progressbar/dist/styles.css\";\r\nimport {\r\n  CreditsType,\r\n  GenresType,\r\n  MovieDetailsType,\r\n} from \"../../../Types/Types\";\r\nimport { crewStaff } from \"../../Helper/crewstaff\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n  details: MovieDetailsType | null;\r\n  original_title: undefined | string;\r\n  release_date: undefined | string;\r\n  original_language: undefined | string;\r\n  genres: undefined | Array<GenresType>;\r\n  runtime: undefined | number;\r\n  popularity: undefined | number;\r\n  overview: undefined | string;\r\n  credits: CreditsType | null;\r\n  handaleplay: () => void;\r\n};\r\n\r\nconst CardPoster = (props: PropsType) => {\r\n  const crew: any = [];\r\n\r\n  const voteAvarage = props.details?.vote_average\r\n    ? props.details.vote_average\r\n    : \"\";\r\n\r\n  let votes = voteAvarage.toLocaleString().replace(\".\", \"\");\r\n  if (votes.length < 2) {\r\n    votes = votes + \"0\";\r\n  }\r\n  const voteNumber = parseInt(votes);\r\n\r\n  const trailColorLine = (value: number) => {\r\n    if (value < 30) {\r\n      return \"#fd1818\";\r\n    } else if (value > 30 && value < 70) {\r\n      return \"#ffff5d\";\r\n    } else {\r\n      return \"#50ff50de\";\r\n    }\r\n  };\r\n\r\n  const percent = 60;\r\n\r\n  if (props.credits?.crew) {\r\n    crewStaff(props.credits?.crew, \"Directing\", crew);\r\n    crewStaff(props.credits?.crew, \"Writing\", crew);\r\n    crewStaff(props.credits?.crew, \"Producer\", crew);\r\n  }\r\n\r\n  //console.log(props.credits?.cast.filter(c=> c.known_for_department === \"Acting\"));\r\n  return (\r\n    <div\r\n      className=\"posterWrapp\"\r\n      style={{\r\n        background: `linear-gradient(to left, #7f7f7f9e, black), url(https://image.tmdb.org/t/p/w500/${props.details?.poster_path}) no-repeat`,\r\n      }}\r\n    >\r\n      <div className=\"posterWrapp__img\">\r\n        <img\r\n          src={`https://image.tmdb.org/t/p/w500/${props.details?.poster_path}`}\r\n          alt=\"poster\"\r\n        />\r\n      </div>\r\n      <div className=\"posterWrapp__info\">\r\n        <div className=\"posterWrapp__info-heading\">\r\n          <h2>\r\n            {props.original_title}{\" \"}\r\n            <span>({props.release_date?.slice(0, 4)})</span>{\" \"}\r\n          </h2>\r\n          <p>\r\n            {props.release_date?.replaceAll(\"-\", \"/\")} (\r\n            {props.original_language?.toUpperCase()}){\" \"}\r\n            {props.genres?.map((g) => (\r\n              <span key={g.id}>{g.name}</span>\r\n            ))}{\" \"}\r\n            - {props.runtime ? `${Math.ceil(props.runtime / 60)} h` : \"\"}\r\n          </p>\r\n        </div>\r\n        <div className=\"posterWrapp__info-actions\">\r\n          <ul className=\"posterWrapp__info-actions-list\">\r\n            <li className=\"posterWrapp__info-actions-item\">\r\n              <a\r\n                href=\"#\"\r\n                className=\"posterWrapp__info-actions-link posterWrapp__info-actions-link--score\"\r\n              >\r\n                <div>\r\n                  <CircularProgressbar\r\n                    value={voteNumber}\r\n                    text={`${voteNumber}%`}\r\n                    styles={buildStyles({\r\n                      //trail: { stroke: \"#fff\" },\r\n                      textColor: \"#fff\",\r\n                      textSize: \"3rem\",\r\n                      backgroundColor: \"#000\",\r\n                      trailColor: \"#3d543fba\",\r\n                      pathColor: trailColorLine(voteNumber),\r\n                    })}\r\n                  />\r\n                </div>\r\n                User Score\r\n              </a>\r\n            </li>\r\n            <li className=\"posterWrapp__info-actions-item\">\r\n              <a\r\n                href=\"#\"\r\n                className=\"posterWrapp__info-actions-link posterWrapp__info-actions-link--styled\"\r\n              >\r\n                <FormatListBulletedRoundedIcon />\r\n              </a>\r\n              <div className=\"movieCrad__tolltip\">\r\n                Login to create and edit custom lists\r\n              </div>\r\n            </li>\r\n            <li className=\"posterWrapp__info-actions-item\">\r\n              <a\r\n                href=\"#\"\r\n                className=\"posterWrapp__info-actions-link posterWrapp__info-actions-link--styled\"\r\n              >\r\n                <FavoriteRoundedIcon />\r\n              </a>\r\n              <div className=\"movieCrad__tolltip\">\r\n                Login to add this movie to your favourite list\r\n              </div>\r\n            </li>\r\n            <li className=\"posterWrapp__info-actions-item\">\r\n              <a\r\n                href=\"#\"\r\n                className=\"posterWrapp__info-actions-link posterWrapp__info-actions-link--styled\"\r\n              >\r\n                <BookmarkRoundedIcon />\r\n              </a>\r\n              <div className=\"movieCrad__tolltip\">\r\n                Login to add this movie to your watchlist\r\n              </div>\r\n            </li>\r\n            <li className=\"posterWrapp__info-actions-item\">\r\n              <a\r\n                href=\"#\"\r\n                className=\"posterWrapp__info-actions-link posterWrapp__info-actions-link--styled\"\r\n              >\r\n                <StarRoundedIcon />\r\n              </a>\r\n              <p className=\"movieCrad__tolltip\">Login to rate this movie</p>\r\n            </li>\r\n            <li className=\"posterWrapp__info-actions-item\">\r\n              <button\r\n                className=\"btn btn--postertrailer\"\r\n                onClick={props.handaleplay}\r\n              >\r\n                <PlayArrowRoundedIcon /> Play Trailer\r\n              </button>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n        <div className=\"posterWrapp__info-overview\">\r\n          <p>{props.overview}</p>\r\n        </div>\r\n        <div className=\"posterWrapp__info-cast\">\r\n          <ul className=\"posterWrapp__info-cast-list\">\r\n            {crew.map((c: any) => (\r\n              <li className=\"posterWrapp__info-cast-item\" key={c.credit_id}>\r\n                <Link\r\n                  to={`/posterstaff/${c.id}`}\r\n                  className=\"posterWrapp__info-cast-link\"\r\n                >\r\n                  <p>{c.name}</p>\r\n                  <p>{c.job}</p>\r\n                </Link>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardPoster;\r\n","F:\\REACT\\movie-app\\src\\components\\MovieCard\\Poster\\PosterStaffPage.tsx",[],"F:\\REACT\\movie-app\\src\\components\\MovieCard\\Poster\\StaffCard.tsx",[],"F:\\REACT\\movie-app\\src\\components\\MovieCard\\Poster\\StaffCardMovielist.tsx",[],"F:\\REACT\\movie-app\\src\\components\\MovieCard\\Poster\\StaffHeader.tsx",["544","545","546","547","548","549","550","551"],"import React from \"react\";\r\nimport ArrowDropDownRoundedIcon from \"@material-ui/icons/ArrowDropDownRounded\";\r\n\r\nconst StaffHeader = () => {\r\n  return (\r\n    <div className=\"staffheader__wrap\">\r\n      <nav className=\"menuWrapp\">\r\n        <ul className=\"menuWrapp__list\">\r\n          <li className=\"menuWrapp__item\">\r\n            <span>\r\n              Overview <ArrowDropDownRoundedIcon />\r\n            </span>\r\n            <div className=\"menuWrapp__drop\">\r\n                 <a href=\"#\" className='menuWrapp__drop-link'>main</a>\r\n                 <a href=\"#\" className='menuWrapp__drop-link'>translations</a>\r\n                 <a href=\"#\" className='menuWrapp__drop-link'>changes</a>\r\n            </div>\r\n          </li>\r\n          <li className=\"menuWrapp__item\">\r\n            <span>\r\n              Media <ArrowDropDownRoundedIcon />\r\n            </span>\r\n            <div className=\"menuWrapp__drop\">\r\n               <a href=\"#\" className='menuWrapp__drop-link'>Profiles</a>\r\n            </div>\r\n          </li>\r\n          <li className=\"menuWrapp__item\">\r\n            <span>\r\n              Fandom <ArrowDropDownRoundedIcon />\r\n            </span>\r\n            <div className=\"menuWrapp__drop\">\r\n                <a href=\"#\" className='menuWrapp__drop-link'>discussions</a>\r\n            </div>\r\n          </li>\r\n          <li className=\"menuWrapp__item\">\r\n            <span>\r\n              Share <ArrowDropDownRoundedIcon />\r\n            </span>\r\n            <div className=\"menuWrapp__drop\">\r\n               <a href=\"#\" className='menuWrapp__drop-link'>share link</a>\r\n                 <a href=\"#\" className='menuWrapp__drop-link'>facebook</a>\r\n                 <a href=\"#\" className='menuWrapp__drop-link'>twitter</a>\r\n            </div>\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StaffHeader;\r\n","F:\\REACT\\movie-app\\src\\components\\MovieCard\\Poster\\StaffKnowFor.tsx",["552","553","554","555","556","557","558","559"],"import React, { useState } from \"react\";\r\nimport { filterData, filterDepartament } from \"../../Helper/filterData\";\r\nimport ArrowDropDownRoundedIcon from \"@material-ui/icons/ArrowDropDownRounded\";\r\nimport {\r\n  AllMediaType,\r\n  CombineCreditsCrewType,\r\n  CombinedCreditsCastType,\r\n} from \"../../../Types/Types\";\r\nimport MovieInfoToolTip from \"../../Common/movieInfoToolTip\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n\r\ntype PropsTypes = {\r\n  combineCrew: Array<CombineCreditsCrewType>;\r\n  combineCast: Array<CombinedCreditsCastType>;\r\n};\r\n\r\nconst StaffKnowFor: React.FC<PropsTypes> = ({ combineCrew, combineCast }) => {\r\n  const [showTip, setShowTip] = useState(\"0\");\r\n  const [selectWriting, setSelectWriting] = useState(false);\r\n  const [selectProd, setSelectProd] = useState(false);\r\n  const [selectActing, setSelectActing] = useState(false);\r\n  const [selectDirecting, setSelectDirecting] = useState(false);\r\n  const [clearAll, setClearAll] = useState(false);\r\n  const [movies, setMovies] = useState<any>([]);\r\n  const [tv, setTv] = useState<any>([]);\r\n  const [showMovieTv, setShowMovieTv] = useState(false);\r\n  const [showDep,setShowDep]=useState(true);\r\n  const [showMovTv,setShowMovTv]=useState(false);\r\n\r\n  const moviesCrew = [] as Array<AllMediaType>;\r\n  const tvShow = [] as Array<AllMediaType>;\r\n  const directing = [] as Array<AllMediaType>;\r\n  const production = [] as Array<AllMediaType>;\r\n  const writing = [] as Array<AllMediaType>;\r\n  const acting = [] as Array<AllMediaType>;\r\n\r\n  filterData(combineCast, acting, \"movie\");\r\n  filterData(combineCrew, moviesCrew, \"movie\");\r\n  filterData(combineCast, tvShow, \"tv\");\r\n  filterData(combineCrew, tvShow, \"tv\");\r\n\r\n  filterDepartament(combineCrew, directing, \"Directing\");\r\n  filterDepartament(combineCrew, production, \"Production\");\r\n  filterDepartament(combineCrew, writing, \"Writing\");\r\n\r\n  const allMedia = [\r\n    ...writing,\r\n    ...directing,\r\n    ...production,\r\n    ...acting,\r\n  ] as Array<AllMediaType>;\r\n\r\n  const nrOfMovies = allMedia.filter(\r\n    (item: any) => item.media_type === \"movie\"\r\n  );\r\n  const nrOfTv = allMedia.filter((item: any) => item.media_type === \"tv\");\r\n\r\n  const showToolTip = (id: string) => {\r\n    setShowTip(id);\r\n  };\r\n\r\n  const hideToolTip = (id: string) => {\r\n    setShowTip((id = \"\"));\r\n  };\r\n\r\n  const showWriting = (e: any) => {\r\n    e.preventDefault();\r\n    setSelectWriting(false);\r\n    setSelectProd(true);\r\n    setSelectActing(true);\r\n    setSelectDirecting(true);\r\n    setClearAll(true);\r\n    setShowDep(true);\r\n  };\r\n  const showProd = (e: any) => {\r\n    e.preventDefault();\r\n    setSelectWriting(true);\r\n    setSelectProd(false);\r\n    setSelectActing(true);\r\n    setSelectDirecting(true);\r\n    setClearAll(true);\r\n    setShowDep(true);\r\n  };\r\n  const showActing = (e: any) => {\r\n    e.preventDefault();\r\n    setSelectWriting(true);\r\n    setSelectProd(true);\r\n    setSelectActing(false);\r\n    setSelectDirecting(true);\r\n    setClearAll(true);\r\n    setShowDep(true);\r\n  };\r\n  const showDirecting = (e: any) => {\r\n    e.preventDefault();\r\n    setSelectWriting(true);\r\n    setSelectProd(true);\r\n    setSelectActing(true);\r\n    setSelectDirecting(false);\r\n    setClearAll(true);\r\n    setShowDep(true);\r\n  };\r\n\r\n  const clearAllFilter = () => {\r\n    setSelectWriting(false);\r\n    setSelectProd(false);\r\n    setSelectActing(false);\r\n    setSelectDirecting(false);\r\n    setClearAll(false);\r\n    setShowDep(true);\r\n    setShowMovTv(false)\r\n  };\r\n\r\n  const showMovies = (e: any) => {\r\n    e.preventDefault();\r\n    setShowMovieTv(true);\r\n    setShowDep(false);\r\n    setShowMovTv(true);\r\n    setClearAll(true);\r\n    setMovies(\r\n      allMedia.filter((movie: any) => {\r\n        if (movie.media_type === \"movie\") {\r\n          return movie;\r\n        }\r\n      })\r\n    );\r\n  };\r\n\r\n  const showTvShows = (e: any) => {\r\n    e.preventDefault();\r\n    setShowMovieTv(false);\r\n    setShowDep(false);\r\n    setShowMovTv(true);\r\n    setClearAll(true);\r\n    setTv(\r\n      allMedia.filter((tv: any) => {\r\n        if (tv.media_type === \"tv\") {\r\n          return tv;\r\n        }\r\n      })\r\n    );\r\n  };\r\n  //  console.log(\"D\", directing);\r\n  // console.log(\"P\", production);\r\n  //  console.log(\"A\", acting);\r\n  //  console.log(\"W\", writing);\r\n  return (\r\n    <div className=\"carierwrapp\">\r\n      <div className=\"carierwrapp__header\">\r\n        <ul className=\"menuWrapp__list menuWrapp__list--carier\">\r\n          <li className=\"menuWrapp__item menuWrapp__item--carier\">\r\n            {clearAll ? (\r\n              <button className=\"btn btn--clearall\" onClick={clearAllFilter}>\r\n                Clear\r\n              </button>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n          </li>\r\n          <li className=\"menuWrapp__item menuWrapp__item--carier\">\r\n            <span>\r\n              All <ArrowDropDownRoundedIcon />\r\n            </span>\r\n            <div className=\"menuWrapp__drop\">\r\n              <a href=\"#\" className=\"menuWrapp__drop-link\" onClick={showMovies}>\r\n                {allMedia.slice(0, 1).map((m: any) => (\r\n                  <span key={m.credit_id}>\r\n                    {m.media_type === \"movie\" ? \"Movies\" : \"Movies\"}{\" \"}\r\n                    {nrOfMovies.length}\r\n                  </span>\r\n                ))}\r\n              </a>\r\n              <a\r\n                href=\"#\"\r\n                className=\"menuWrapp__drop-link\"\r\n                onClick={showTvShows}\r\n              >\r\n                {tvShow.slice(0, 1).map((m) => (\r\n                  <span key={m.credit_id}>\r\n                    {`${m.media_type} Shows`} {nrOfTv.length}\r\n                  </span>\r\n                ))}\r\n              </a>\r\n            </div>\r\n          </li>\r\n          <li className=\"menuWrapp__item menuWrapp__item--carier\">\r\n            <span>\r\n              Departament <ArrowDropDownRoundedIcon />\r\n            </span>\r\n            <div className=\"menuWrapp__drop\">\r\n              <a\r\n                href=\"#\"\r\n                className=\"menuWrapp__drop-link\"\r\n                onClick={showDirecting}\r\n              >\r\n                {directing.slice(0, 1).map((d) => d.department)}{\" \"}\r\n                {directing.length}\r\n              </a>\r\n              <a href=\"#\" className=\"menuWrapp__drop-link\" onClick={showProd}>\r\n                {production.slice(0, 1).map((p) => p.department)}{\" \"}\r\n                {production.length}\r\n              </a>\r\n              <a\r\n                href=\"#\"\r\n                className=\"menuWrapp__drop-link\"\r\n                onClick={showWriting}\r\n              >\r\n                {writing.length === 0\r\n                  ? \"Writing\"\r\n                  : writing.slice(0, 1).map((p) => p.department)}{\" \"}\r\n                {writing.length}\r\n              </a>\r\n              <a href=\"#\" className=\"menuWrapp__drop-link\" onClick={showActing}>\r\n                {acting\r\n                  .slice(0, 1)\r\n                  .map((p) =>\r\n                    p.character === \"Himself\" ? \"Acting\" : \"Acting\"\r\n                  )}{\" \"}\r\n                {acting.length === 0 ? \"\" : acting.length}\r\n              </a>\r\n            </div>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n      <div className=\"carierwrapp__body\">\r\n       <div style={showMovTv?{display:'table',width:'100%'}:{display:'none'}}>\r\n        {showMovieTv ? (\r\n          <TableContainer component={Paper}>\r\n            <Table\r\n              size=\"medium\"\r\n              aria-label=\"a dense table\"\r\n            >\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell className=\"tableheadcell\">\r\n                    <h3>Directing</h3>\r\n                  </TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {movies\r\n                  .filter((item: any) => item.department === \"Directing\")\r\n                  .map((movie: any) => (\r\n                    <TableRow key={movie.credit_id}>\r\n                      <TableCell component=\"th\" scope=\"row\">\r\n                        <div className=\"movieinfo\">\r\n                          <span>\r\n                            {movie.release_date === undefined\r\n                              ? \"\"\r\n                              : movie.release_date.slice(0, 4)}\r\n                            {movie.first_air_date\r\n                              ? movie.first_air_date.slice(0, 4)\r\n                              : \"\"}\r\n                          </span>{\" \"}\r\n                          <span\r\n                            className=\"movieinfo__dot\"\r\n                            onClick={() => showToolTip(movie.credit_id)}\r\n                            id={`${movie.id}`}\r\n                          ></span>{\" \"}\r\n                          {movie.title ? movie.title : movie.name}\r\n                          <span className=\"movieinfo__job\">{`... as ${movie.job}`}</span>\r\n                          <MovieInfoToolTip\r\n                            poster={movie.poster_path}\r\n                            desc={movie.overview}\r\n                            title={movie.title}\r\n                            name={movie.name}\r\n                            showTip={showTip}\r\n                            id={movie.credit_id}\r\n                            hideTooltip={() => hideToolTip(movie.credit_id)}\r\n                          />\r\n                        </div>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n              </TableBody>\r\n            </Table>\r\n            <Table\r\n              size=\"medium\"\r\n              aria-label=\"a dense table\"\r\n            >\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell className=\"tableheadcell\">\r\n                    <h3>Writing</h3>\r\n                  </TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {movies\r\n                  .filter((item: any) => item.department === \"Writing\")\r\n                  .map((movie: any) => (\r\n                    <TableRow key={movie.credit_id}>\r\n                      <TableCell component=\"th\" scope=\"row\">\r\n                        <div className=\"movieinfo\">\r\n                          <span>\r\n                            {movie.release_date === undefined\r\n                              ? \"\"\r\n                              : movie.release_date.slice(0, 4)}\r\n                            {movie.first_air_date\r\n                              ? movie.first_air_date.slice(0, 4)\r\n                              : \"\"}\r\n                          </span>{\" \"}\r\n                          <span\r\n                            className=\"movieinfo__dot\"\r\n                            onClick={() => showToolTip(movie.credit_id)}\r\n                            id={`${movie.id}`}\r\n                          ></span>{\" \"}\r\n                          {movie.title ? movie.title : movie.name}\r\n                          <span className=\"movieinfo__job\">{`... as ${movie.job}`}</span>\r\n                          <MovieInfoToolTip\r\n                            poster={movie.poster_path}\r\n                            desc={movie.overview}\r\n                            title={movie.title}\r\n                            name={movie.name}\r\n                            showTip={showTip}\r\n                            id={movie.credit_id}\r\n                            hideTooltip={() => hideToolTip(movie.credit_id)}\r\n                          />\r\n                        </div>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n              </TableBody>\r\n            </Table>\r\n            <Table\r\n              size=\"medium\"\r\n              aria-label=\"a dense table\"\r\n            >\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell className=\"tableheadcell\">\r\n                    <h3>Production</h3>\r\n                  </TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {movies\r\n                  .filter((item: any) => item.department === \"Production\")\r\n                  .map((movie: any) => (\r\n                    <TableRow key={movie.credit_id}>\r\n                      <TableCell component=\"th\" scope=\"row\">\r\n                        <div className=\"movieinfo\">\r\n                          <span>\r\n                            {movie.release_date === undefined\r\n                              ? \"\"\r\n                              : movie.release_date.slice(0, 4)}\r\n                            {movie.first_air_date\r\n                              ? movie.first_air_date.slice(0, 4)\r\n                              : \"\"}\r\n                          </span>{\" \"}\r\n                          <span\r\n                            className=\"movieinfo__dot\"\r\n                            onClick={() => showToolTip(movie.credit_id)}\r\n                            id={`${movie.id}`}\r\n                          ></span>{\" \"}\r\n                          {movie.title ? movie.title : movie.name}\r\n                          <span className=\"movieinfo__job\">{`... as ${movie.job}`}</span>\r\n                          <MovieInfoToolTip\r\n                            poster={movie.poster_path}\r\n                            desc={movie.overview}\r\n                            title={movie.title}\r\n                            name={movie.name}\r\n                            showTip={showTip}\r\n                            id={movie.credit_id}\r\n                            hideTooltip={() => hideToolTip(movie.credit_id)}\r\n                          />\r\n                        </div>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n              </TableBody>\r\n            </Table>\r\n            <Table\r\n              size=\"medium\"\r\n              aria-label=\"a dense table\"\r\n            >\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell className=\"tableheadcell\">\r\n                    <h3>Acting</h3>\r\n                  </TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {movies\r\n                  .filter((item: any) => item.department === \"Production\")\r\n                  .map((movie: any) => (\r\n                    <TableRow key={movie.credit_id}>\r\n                      <TableCell component=\"th\" scope=\"row\">\r\n                        <div className=\"movieinfo\">\r\n                          <span>\r\n                            {movie.release_date === undefined\r\n                              ? \"\"\r\n                              : movie.release_date.slice(0, 4)}\r\n                            {movie.first_air_date\r\n                              ? movie.first_air_date.slice(0, 4)\r\n                              : \"\"}\r\n                          </span>{\" \"}\r\n                          <span\r\n                            className=\"movieinfo__dot\"\r\n                            onClick={() => showToolTip(movie.credit_id)}\r\n                            id={`${movie.id}`}\r\n                          ></span>{\" \"}\r\n                          {movie.title ? movie.title : movie.name}\r\n                          <span className=\"movieinfo__job\">{`... as ${movie.job}`}</span>\r\n                          <MovieInfoToolTip\r\n                            poster={movie.poster_path}\r\n                            desc={movie.overview}\r\n                            title={movie.title}\r\n                            name={movie.name}\r\n                            showTip={showTip}\r\n                            id={movie.credit_id}\r\n                            hideTooltip={() => hideToolTip(movie.credit_id)}\r\n                          />\r\n                        </div>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n        ) : (\r\n          <TableContainer component={Paper}>\r\n            <Table\r\n              size=\"medium\"\r\n              aria-label=\"a dense table\"\r\n            >\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell className=\"tableheadcell\">\r\n                    <h3>Directing</h3>\r\n                  </TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {tv\r\n                  .filter((item: any) => item.department === \"Directing\")\r\n                  .map((movie: any) => (\r\n                    <TableRow key={movie.credit_id}>\r\n                      <TableCell component=\"th\" scope=\"row\">\r\n                        <div className=\"movieinfo\">\r\n                          <span>\r\n                            {movie.release_date === undefined\r\n                              ? \"\"\r\n                              : movie.release_date.slice(0, 4)}\r\n                            {movie.first_air_date\r\n                              ? movie.first_air_date.slice(0, 4)\r\n                              : \"\"}\r\n                          </span>{\" \"}\r\n                          <span\r\n                            className=\"movieinfo__dot\"\r\n                            onClick={() => showToolTip(movie.credit_id)}\r\n                            id={`${movie.id}`}\r\n                          ></span>{\" \"}\r\n                          {movie.title ? movie.title : movie.name}\r\n                          <span className=\"movieinfo__job\">{movie.episode_count>1?`(${movie.episode_count} episodes)`:`(${movie.episode_count} episode)`}{`... as ${movie.job}`}</span>\r\n                          <MovieInfoToolTip\r\n                            poster={movie.poster_path}\r\n                            desc={movie.overview}\r\n                            title={movie.title}\r\n                            name={movie.name}\r\n                            showTip={showTip}\r\n                            id={movie.credit_id}\r\n                            hideTooltip={() => hideToolTip(movie.credit_id)}\r\n                          />\r\n                        </div>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n              </TableBody>\r\n            </Table>\r\n            <Table\r\n              size=\"medium\"\r\n              aria-label=\"a dense table\"\r\n            >\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell className=\"tableheadcell\">\r\n                    <h3>Writing</h3>\r\n                  </TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {tv\r\n                  .filter((item: any) => item.department === \"Writing\")\r\n                  .map((movie: any) => (\r\n                    <TableRow key={movie.credit_id}>\r\n                      <TableCell component=\"th\" scope=\"row\">\r\n                        <div className=\"movieinfo\">\r\n                          <span>\r\n                            {movie.release_date === undefined\r\n                              ? \"\"\r\n                              : movie.release_date.slice(0, 4)}\r\n                            {movie.first_air_date\r\n                              ? movie.first_air_date.slice(0, 4)\r\n                              : \"\"}\r\n                          </span>{\" \"}\r\n                          <span\r\n                            className=\"movieinfo__dot\"\r\n                            onClick={() => showToolTip(movie.credit_id)}\r\n                            id={`${movie.id}`}\r\n                          ></span>{\" \"}\r\n                          {movie.title ? movie.title : movie.name}\r\n                          <span className=\"movieinfo__job\">{movie.episode_count>1?`(${movie.episode_count} episodes)`:`(${movie.episode_count} episode)`}{`... as ${movie.job}`}</span>\r\n                          <MovieInfoToolTip\r\n                            poster={movie.poster_path}\r\n                            desc={movie.overview}\r\n                            title={movie.title}\r\n                            name={movie.name}\r\n                            showTip={showTip}\r\n                            id={movie.credit_id}\r\n                            hideTooltip={() => hideToolTip(movie.credit_id)}\r\n                          />\r\n                        </div>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n              </TableBody>\r\n            </Table>\r\n            <Table\r\n              size=\"medium\"\r\n              aria-label=\"a dense table\"\r\n            >\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell className=\"tableheadcell\">\r\n                    <h3>Production</h3>\r\n                  </TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {tv\r\n                  .filter((item: any) => item.department === \"Production\")\r\n                  .map((movie: any) => (\r\n                    <TableRow key={movie.credit_id}>\r\n                      <TableCell component=\"th\" scope=\"row\">\r\n                        <div className=\"movieinfo\">\r\n                          <span>\r\n                            {movie.release_date === undefined\r\n                              ? \"\"\r\n                              : movie.release_date.slice(0, 4)}\r\n                            {movie.first_air_date\r\n                              ? movie.first_air_date.slice(0, 4)\r\n                              : \"\"}\r\n                          </span>{\" \"}\r\n                          <span\r\n                            className=\"movieinfo__dot\"\r\n                            onClick={() => showToolTip(movie.credit_id)}\r\n                            id={`${movie.id}`}\r\n                          ></span>{\" \"}\r\n                          {movie.title ? movie.title : movie.name}\r\n                            <span className=\"movieinfo__job\">{movie.episode_count>1?`(${movie.episode_count} episodes)`:`(${movie.episode_count} episode)`}{`... as ${movie.job}`}</span>\r\n                          <MovieInfoToolTip\r\n                            poster={movie.poster_path}\r\n                            desc={movie.overview}\r\n                            title={movie.title}\r\n                            name={movie.name}\r\n                            showTip={showTip}\r\n                            id={movie.credit_id}\r\n                            hideTooltip={() => hideToolTip(movie.credit_id)}\r\n                          />\r\n                        </div>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n              </TableBody>\r\n            </Table>\r\n            <Table\r\n              size=\"medium\"\r\n              aria-label=\"a dense table\"\r\n              style={selectWriting ? { display: \"none\" } : { display: \"table\" }}\r\n            >\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell className=\"tableheadcell\">\r\n                    <h3>Acting</h3>\r\n                  </TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {tv\r\n                  .filter((item: any) => item.department === \"Production\")\r\n                  .map((movie: any) => (\r\n                    <TableRow key={movie.credit_id}>\r\n                      <TableCell component=\"th\" scope=\"row\">\r\n                        <div className=\"movieinfo\">\r\n                          <span>\r\n                            {movie.release_date === undefined\r\n                              ? \"\"\r\n                              : movie.release_date.slice(0, 4)}\r\n                            {movie.first_air_date\r\n                              ? movie.first_air_date.slice(0, 4)\r\n                              : \"\"}\r\n                          </span>{\" \"}\r\n                          <span\r\n                            className=\"movieinfo__dot\"\r\n                            onClick={() => showToolTip(movie.credit_id)}\r\n                            id={`${movie.id}`}\r\n                          ></span>{\" \"}\r\n                          {movie.title ? movie.title : movie.name}\r\n                          <span className=\"movieinfo__job\">{movie.episode_count>1?`(${movie.episode_count} episodes)`:`(${movie.episode_count} episode)`}{`... as ${movie.job}`}</span>\r\n                          <MovieInfoToolTip\r\n                            poster={movie.poster_path}\r\n                            desc={movie.overview}\r\n                            title={movie.title}\r\n                            name={movie.name}\r\n                            showTip={showTip}\r\n                            id={movie.credit_id}\r\n                            hideTooltip={() => hideToolTip(movie.credit_id)}\r\n                          />\r\n                        </div>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n        )}\r\n        </div>\r\n        {showDep?\r\n        <TableContainer component={Paper}>\r\n         <Table\r\n            size=\"medium\"\r\n            aria-label=\"a dense table\"\r\n            style={selectWriting ? { display: \"none\" } : { display: \"table\" }}\r\n          >\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell className=\"tableheadcell\">\r\n                  <h3>Writing</h3>\r\n                </TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {writing.map((movie) => (\r\n                <TableRow key={movie.credit_id}>\r\n                  <TableCell component=\"th\" scope=\"row\">\r\n                    <div className=\"movieinfo\">\r\n                      <span>\r\n                        {movie.release_date === undefined\r\n                          ? \"\"\r\n                          : movie.release_date.slice(0, 4)}\r\n                        {movie.first_air_date\r\n                          ? movie.first_air_date.slice(0, 4)\r\n                          : \"\"}\r\n                      </span>{\" \"}\r\n                      <span\r\n                        className=\"movieinfo__dot\"\r\n                        onClick={() => showToolTip(movie.credit_id)}\r\n                        id={`${movie.id}`}\r\n                      ></span>{\" \"}\r\n                      {movie.title ? movie.title : movie.name}\r\n                      <span className=\"movieinfo__job\">{`... as ${movie.job}`}</span>\r\n                      <MovieInfoToolTip\r\n                        poster={movie.poster_path}\r\n                        desc={movie.overview}\r\n                        title={movie.title}\r\n                        name={movie.name}\r\n                        showTip={showTip}\r\n                        id={movie.credit_id}\r\n                        hideTooltip={() => hideToolTip(movie.credit_id)}\r\n                      />\r\n                    </div>\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n          <Table\r\n            size=\"medium\"\r\n            aria-label=\"a dense table\"\r\n            style={selectDirecting ? { display: \"none\" } : { display: \"table\" }}\r\n          >\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell className=\"tableheadcell\">\r\n                  <h3>Directing</h3>\r\n                </TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {directing.map((movie) => (\r\n                <TableRow key={movie.credit_id}>\r\n                  <TableCell component=\"th\" scope=\"row\">\r\n                    <div className=\"movieinfo\">\r\n                      <span>\r\n                        {movie.release_date === undefined\r\n                          ? \"\"\r\n                          : movie.release_date.slice(0, 4)}\r\n                        {movie.first_air_date\r\n                          ? movie.first_air_date.slice(0, 4)\r\n                          : \"\"}\r\n                      </span>{\" \"}\r\n                      <span\r\n                        className=\"movieinfo__dot\"\r\n                        onClick={() => showToolTip(movie.credit_id)}\r\n                        id={`${movie.id}`}\r\n                      ></span>{\" \"}\r\n                      {movie.title ? movie.title : movie.name}\r\n                      <span className=\"movieinfo__job\">{`... as ${movie.job}`}</span>\r\n                      <MovieInfoToolTip\r\n                        poster={movie.poster_path}\r\n                        desc={movie.overview}\r\n                        title={movie.title}\r\n                        name={movie.name}\r\n                        showTip={showTip}\r\n                        id={movie.credit_id}\r\n                        hideTooltip={() => hideToolTip(movie.credit_id)}\r\n                      />\r\n                    </div>\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n          <Table\r\n            size=\"medium\"\r\n            aria-label=\"a dense table\"\r\n            style={selectProd ? { display: \"none\" } : { display: \"table\" }}\r\n          >\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell className=\"tableheadcell\">\r\n                  <h3>Production</h3>\r\n                </TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {production.map((movie) => (\r\n                <TableRow key={movie.credit_id}>\r\n                  <TableCell component=\"th\" scope=\"row\">\r\n                    <div className=\"movieinfo\">\r\n                      <span>\r\n                        {movie.release_date === undefined\r\n                          ? movie.release_date\r\n                          : \"---\"\r\n                          ? movie.release_date.slice(0, 4)\r\n                          : \"\"}\r\n                        {movie.first_air_date\r\n                          ? movie.first_air_date.slice(0, 4)\r\n                          : \"\"}\r\n                      </span>{\" \"}\r\n                      <span\r\n                        className=\"movieinfo__dot\"\r\n                        onClick={() => showToolTip(movie.credit_id)}\r\n                        id={`${movie.id}`}\r\n                      ></span>{\" \"}\r\n                      {movie.title ? movie.title : movie.name}\r\n                      <span className=\"movieinfo__job\">{`... as ${movie.job}`}</span>\r\n                      <MovieInfoToolTip\r\n                        poster={movie.poster_path}\r\n                        desc={movie.overview}\r\n                        title={movie.title}\r\n                        name={movie.name}\r\n                        showTip={showTip}\r\n                        id={movie.credit_id}\r\n                        hideTooltip={() => hideToolTip(movie.credit_id)}\r\n                      />\r\n                    </div>\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n          <Table\r\n            size=\"medium\"\r\n            aria-label=\"a dense table\"\r\n            style={selectActing ? { display: \"none\" } : { display: \"table\" }}\r\n          >{}\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell className=\"tableheadcell\">\r\n                  <h3>Acting</h3>\r\n                </TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {acting.map((movie) => (\r\n                <TableRow key={movie.credit_id}>\r\n                  <TableCell component=\"th\" scope=\"row\">\r\n                    <div className=\"movieinfo\">\r\n                      <span>\r\n                        {movie.release_date === undefined\r\n                          ? \"---\"\r\n                          : movie.release_date.slice(0, 4)}\r\n                        {movie.first_air_date\r\n                          ? movie.first_air_date.slice(0, 4)\r\n                          : \"\"}\r\n                      </span>{\" \"}\r\n                      <span\r\n                        className=\"movieinfo__dot\"\r\n                        onClick={() => showToolTip(movie.credit_id)}\r\n                        id={`${movie.id}`}\r\n                      ></span>{\" \"}\r\n                      {movie.title ? movie.title : movie.name}\r\n                      <span className=\"movieinfo__job\">{`... as ${\r\n                        movie.character ? movie.character : \"Unknown\"\r\n                      }`}</span>\r\n                      <MovieInfoToolTip\r\n                        poster={movie.poster_path}\r\n                        desc={movie.overview}\r\n                        title={movie.title}\r\n                        name={movie.name}\r\n                        showTip={showTip}\r\n                        id={movie.credit_id}\r\n                        hideTooltip={() => hideToolTip(movie.credit_id)}\r\n                      />\r\n                    </div>\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>:''}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StaffKnowFor;\r\n","F:\\REACT\\movie-app\\src\\components\\MovieCard\\Recomandations\\CardRecomand.tsx",[],"F:\\REACT\\movie-app\\src\\components\\MovielistHeader\\MovielistHeader.tsx",[],"F:\\REACT\\movie-app\\src\\components\\Movies\\NowPlaying.tsx",[],"F:\\REACT\\movie-app\\src\\components\\Movies\\Popular.tsx",["560"],"import Card from \"../Common/Card\";\r\nimport React, { FC, useEffect, useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Filter from \"../Common/Filter\";\r\nimport Sort from \"../Common/Sort\";\r\nimport {\r\n  curentPageSelector,\r\n  popularSelector,\r\n} from \"../Store/Selectors/HomePageSelector\";\r\nimport { AppStateType } from \"../Store/store\";\r\nimport Paginatior from \"../Common/Paginator\";\r\nimport {\r\n  getSelectedLang,\r\n  requestPopularMovies,\r\n} from \"../Store/Reducers/HomePageReducer\";\r\n\r\nconst Popular: FC = () => {\r\n  const popularMovies = useSelector((state: AppStateType) =>\r\n    popularSelector(state)\r\n  );\r\n  const currentPage = useSelector((state: AppStateType) =>\r\n    curentPageSelector(state)\r\n  );\r\n\r\n  const [page, setPage] = useState<number>(currentPage);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(requestPopularMovies(page));\r\n  }, [page, dispatch]);\r\n\r\n  const handalePageChange = (e: any, value: number) => {\r\n    setPage(value);\r\n  };\r\n  return (\r\n    <>\r\n      <h1 className=\"heading\">Popular Movies</h1>\r\n      <div className=\"popularwrap\">\r\n        <div className=\"popularwrap__filters\">\r\n          <Sort />\r\n          <Filter />\r\n          <button className=\"btn btn--search_filter\" disabled={true}>\r\n            Search\r\n          </button>\r\n        </div>\r\n        <div className=\"popularwrap__movielist\">\r\n          {popularMovies?.results.map((p, index) => (\r\n            <Link\r\n              to={`/movie-card/${p.id}`}\r\n              key={index}\r\n              className=\"popularwrap__movielist-link\"\r\n              target='_blank'\r\n            >\r\n              <Card\r\n                poster={p.poster_path}\r\n                title={p.title}\r\n                voteAverage={p.vote_average}\r\n                realese={p.release_date}\r\n                firstAirDate={p.first_air_date}\r\n                name={p.name}\r\n              />\r\n            </Link>\r\n          ))}\r\n          <Paginatior\r\n            handalePageChange={handalePageChange}\r\n            totalPages={popularMovies?.total_pages}\r\n            page={page}\r\n          />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Popular;\r\n","F:\\REACT\\movie-app\\src\\components\\Movies\\TopRated.tsx",[],"F:\\REACT\\movie-app\\src\\components\\Movies\\Upcoming.tsx",[],"F:\\REACT\\movie-app\\src\\components\\NaigationBar\\NavBar.tsx",["561","562","563","564","565","566","567","568","569","570","571","572","573","574","575","576","577"],"import React, { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport SearchOutlinedIcon from \"@material-ui/icons/SearchOutlined\";\r\nimport { ImPlus } from \"react-icons/im\";\r\nimport { MdClose } from \"react-icons/md\";\r\nimport Select from \"react-select\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { langSelector, transSelector } from \"../Store/Selectors/LangSelector\";\r\nimport { AppStateType } from \"../Store/store\";\r\nimport {\r\n  requestLangs,\r\n  requestTranslations,\r\n} from \"../Store/Reducers/LangReducer\";\r\nimport { LangsType } from \"../../Types/Types\";\r\nimport { getSelectedLang } from \"../Store/Reducers/HomePageReducer\";\r\nimport SearchSlide from \"../Common/SearchSlide\";\r\n\r\n\r\n\r\nconst NavBar = () => {\r\n  const [showToolTip, setShowToolTip] = useState(false);\r\n  const [showlang, setShowlang] = useState(false);\r\n  const [showMenu, setShowMenu] = useState(false);\r\n  const [selectedOption, setSelectedOption] = useState<\r\n    LangsType | undefined | null\r\n  >(null);\r\n  const [showSearch, setShowSearch] = useState(false);\r\n\r\n  const langs = useSelector((state: AppStateType) => langSelector(state));\r\n  const translations = useSelector((state: AppStateType) =>\r\n    transSelector(state)\r\n  );\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(requestLangs());\r\n    dispatch(requestTranslations());\r\n    dispatch(getSelectedLang(selectedOption?.value));\r\n  }, [selectedOption]);\r\n\r\n  const languages: Array<LangsType> = [];\r\n\r\n  const concatValues = (arr1: any, arr2: any) => {\r\n    arr1.filter((item: any) => {\r\n      for (let i = 0; i < arr2.length; i++) {\r\n        if (item.iso_639_1 === arr2[i].slice(0, 2)) {\r\n          languages.push({\r\n            ...item,\r\n            value: `${arr2[i]}`,\r\n            label: `${item.english_name} (${arr2[i]})`,\r\n          });\r\n        }\r\n      }\r\n    });\r\n  };\r\n  concatValues(langs, translations);\r\n  //console.log(selectedOption);\r\n\r\n  const handleMouseEnter = () => {\r\n    setShowToolTip(true);\r\n  };\r\n  const handleMouseLeave = () => {\r\n    setShowToolTip(false);\r\n  };\r\n  const showLang = () => {\r\n    setShowlang(!showlang);\r\n  };\r\n\r\n  const showHideNav = () => {\r\n    setShowMenu(!showMenu);\r\n  };\r\n  const showSearchTab = () => {\r\n    setShowSearch(true);\r\n  };\r\n  const hideSearchTab = () => {\r\n    setShowSearch(false);\r\n  };\r\n\r\n\r\n  const screenWidth = window.innerWidth;\r\n\r\n\r\n  return (\r\n    <>\r\n      <div className=\"navbarwrapp\">\r\n        <div className=\"navbarwrapp__container\">\r\n          <div className=\"navbarwrapp__left\">\r\n            <button onClick={showHideNav} className=\"btn btn--mobile\">\r\n              <span></span>\r\n            </button>\r\n            <div className=\"navbarwrapp__left__logo\">\r\n              <Link to=\"/\">MOVIE-APP</Link>\r\n            </div>\r\n            {screenWidth < 665 && showMenu ? (\r\n              <nav className='navbarwrapp__left__navbar navbarwrapp__left__navbar--mobile'>\r\n                <ul className='navbarwrapp__left__list navbarwrapp__left__list--mobile'>\r\n                  <li className=\"navbarwrapp__left__list__item\">\r\n                    <span className=\"navbarwrapp__left__list__link\">\r\n                      movies\r\n                    </span>\r\n                    <ul className=\"dropdown-navbar\">\r\n                      <li\r\n                        className=\"dropdown-navbar__item\"\r\n                        onClick={() => setShowMenu(false)}\r\n                      >\r\n                        <Link\r\n                          to=\"/movies/popular\"\r\n                          className=\"dropdown-navbar__link\"\r\n                        >\r\n                          popular\r\n                        </Link>\r\n                      </li>\r\n                      <li\r\n                        className=\"dropdown-navbar__item\"\r\n                        onClick={() => setShowMenu(false)}\r\n                      >\r\n                        <Link\r\n                          to=\"/movies/nowplaying\"\r\n                          className=\"dropdown-navbar__link\"\r\n                        >\r\n                          now playing\r\n                        </Link>\r\n                      </li>\r\n                      <li\r\n                        className=\"dropdown-navbar__item\"\r\n                        onClick={() => setShowMenu(false)}\r\n                      >\r\n                        <Link\r\n                          to=\"/movies/upcoming\"\r\n                          className=\"dropdown-navbar__link\"\r\n                        >\r\n                          upcoming\r\n                        </Link>\r\n                      </li>\r\n                      <li\r\n                        className=\"dropdown-navbar__item\"\r\n                        onClick={() => setShowMenu(false)}\r\n                      >\r\n                        <Link\r\n                          to=\"/movies/toprated\"\r\n                          className=\"dropdown-navbar__link\"\r\n                        >\r\n                          top rated\r\n                        </Link>\r\n                      </li>\r\n                    </ul>\r\n                  </li>\r\n                  <li className=\"navbarwrapp__left__list__item\">\r\n                    <a href=\"#\" className=\"navbarwrapp__left__list__link\">\r\n                      tv shows\r\n                    </a>\r\n                    <ul className=\"dropdown-navbar\">\r\n                      <li\r\n                        className=\"dropdown-navbar__item\"\r\n                        onClick={() => setShowMenu(false)}\r\n                      >\r\n                        <Link\r\n                          to=\"/tv/popular\"\r\n                          className=\"dropdown-navbar__link\"\r\n                        >\r\n                          popular\r\n                        </Link>\r\n                      </li>\r\n                      <li\r\n                        className=\"dropdown-navbar__item\"\r\n                        onClick={() => setShowMenu(false)}\r\n                      >\r\n                        <Link\r\n                          to=\"/tv/airingtoday\"\r\n                          className=\"dropdown-navbar__link\"\r\n                        >\r\n                          airing today\r\n                        </Link>\r\n                      </li>\r\n                      <li\r\n                        className=\"dropdown-navbar__item\"\r\n                        onClick={() => setShowMenu(false)}\r\n                      >\r\n                        <Link to=\"/tv/ontv\" className=\"dropdown-navbar__link\">\r\n                          on air\r\n                        </Link>\r\n                      </li>\r\n                      <li\r\n                        className=\"dropdown-navbar__item\"\r\n                        onClick={() => setShowMenu(false)}\r\n                      >\r\n                        <Link\r\n                          to=\"/tv/toprated\"\r\n                          className=\"dropdown-navbar__link\"\r\n                        >\r\n                          top rated\r\n                        </Link>\r\n                      </li>\r\n                    </ul>\r\n                  </li>\r\n                  <li className=\"navbarwrapp__left__list__item\">\r\n                    <a href=\"#\" className=\"navbarwrapp__left__list__link\">\r\n                      people\r\n                    </a>\r\n                    <ul className=\"dropdown-navbar\">\r\n                      <li className=\"dropdown-navbar__item\">\r\n                        <Link\r\n                          to=\"/people/popular\"\r\n                          className=\"dropdown-navbar__link\"\r\n                          onClick={() => setShowMenu(false)}\r\n                        >\r\n                          popular people\r\n                        </Link>\r\n                      </li>\r\n                    </ul>\r\n                  </li>\r\n                  <li className=\"navbarwrapp__left__list__item\">\r\n                    <a href=\"#\" className=\"navbarwrapp__left__list__link\">\r\n                      more\r\n                    </a>\r\n                    <ul className=\"dropdown-navbar\">\r\n                      <li className=\"dropdown-navbar__item\">\r\n                        <a href=\"#\" className=\"dropdown-navbar__link\">\r\n                          discutions\r\n                        </a>\r\n                      </li>\r\n                      <li className=\"dropdown-navbar__item\">\r\n                        <a href=\"#\" className=\"dropdown-navbar__link\">\r\n                          leaderboard\r\n                        </a>\r\n                      </li>\r\n                      <li className=\"dropdown-navbar__item\">\r\n                        <a href=\"#\" className=\"dropdown-navbar__link\">\r\n                          suport\r\n                        </a>\r\n                      </li>\r\n                    </ul>\r\n                  </li>\r\n                </ul>\r\n              </nav>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n            <nav className=\"navbarwrapp__left__navbar \">\r\n              <ul className=\"navbarwrapp__left__list \">\r\n                <li className=\"navbarwrapp__left__list__item\">\r\n                  <a href=\"#\" className=\"navbarwrapp__left__list__link\">\r\n                    movies\r\n                  </a>\r\n                  <ul className=\"dropdown-navbar\">\r\n                    <li className=\"dropdown-navbar__item\">\r\n                      <Link\r\n                        to=\"/movies/popular\"\r\n                        className=\"dropdown-navbar__link\"\r\n                      >\r\n                        popular\r\n                      </Link>\r\n                    </li>\r\n                    <li className=\"dropdown-navbar__item\">\r\n                      <Link\r\n                        to=\"/movies/nowplaying\"\r\n                        className=\"dropdown-navbar__link\"\r\n                      >\r\n                        now playing\r\n                      </Link>\r\n                    </li>\r\n                    <li className=\"dropdown-navbar__item\">\r\n                      <Link\r\n                        to=\"/movies/upcoming\"\r\n                        className=\"dropdown-navbar__link\"\r\n                      >\r\n                        upcoming\r\n                      </Link>\r\n                    </li>\r\n                    <li className=\"dropdown-navbar__item\">\r\n                      <Link\r\n                        to=\"/movies/toprated\"\r\n                        className=\"dropdown-navbar__link\"\r\n                      >\r\n                        top rated\r\n                      </Link>\r\n                    </li>\r\n                  </ul>\r\n                </li>\r\n                <li className=\"navbarwrapp__left__list__item\">\r\n                  <a href=\"#\" className=\"navbarwrapp__left__list__link\">\r\n                    tv shows\r\n                  </a>\r\n                  <ul className=\"dropdown-navbar\">\r\n                    <li className=\"dropdown-navbar__item\">\r\n                      <Link to=\"/tv/popular\" className=\"dropdown-navbar__link\">\r\n                        popular\r\n                      </Link>\r\n                    </li>\r\n                    <li className=\"dropdown-navbar__item\">\r\n                      <Link\r\n                        to=\"/tv/airingtoday\"\r\n                        className=\"dropdown-navbar__link\"\r\n                      >\r\n                        airing today\r\n                      </Link>\r\n                    </li>\r\n                    <li className=\"dropdown-navbar__item\">\r\n                      <Link to=\"/tv/ontv\" className=\"dropdown-navbar__link\">\r\n                        on air\r\n                      </Link>\r\n                    </li>\r\n                    <li className=\"dropdown-navbar__item\">\r\n                      <Link to=\"/tv/toprated\" className=\"dropdown-navbar__link\">\r\n                        top rated\r\n                      </Link>\r\n                    </li>\r\n                  </ul>\r\n                </li>\r\n                <li className=\"navbarwrapp__left__list__item\">\r\n                  <a href=\"#\" className=\"navbarwrapp__left__list__link\">\r\n                    people\r\n                  </a>\r\n                  <ul className=\"dropdown-navbar\">\r\n                    <li className=\"dropdown-navbar__item\">\r\n                      <Link\r\n                        to=\"/people/popular\"\r\n                        className=\"dropdown-navbar__link\"\r\n                      >\r\n                        popular people\r\n                      </Link>\r\n                    </li>\r\n                  </ul>\r\n                </li>\r\n                <li className=\"navbarwrapp__left__list__item\">\r\n                  <a href=\"#\" className=\"navbarwrapp__left__list__link\">\r\n                    more\r\n                  </a>\r\n                  <ul className=\"dropdown-navbar\">\r\n                    <li className=\"dropdown-navbar__item\">\r\n                      <a href=\"#\" className=\"dropdown-navbar__link\">\r\n                        discutions\r\n                      </a>\r\n                    </li>\r\n                    <li className=\"dropdown-navbar__item\">\r\n                      <a href=\"#\" className=\"dropdown-navbar__link\">\r\n                        leaderboard\r\n                      </a>\r\n                    </li>\r\n                    <li className=\"dropdown-navbar__item\">\r\n                      <a href=\"#\" className=\"dropdown-navbar__link\">\r\n                        suport\r\n                      </a>\r\n                    </li>\r\n                  </ul>\r\n                </li>\r\n              </ul>\r\n            </nav>\r\n          </div>\r\n          <div className=\"navbarwrapp__right\">\r\n            <ul className=\"navbarwrapp__right__list\">\r\n              <li className=\"navbarwrapp__right__list__item\">\r\n                <a\r\n                  href=\"#\"\r\n                  className=\"navbarwrapp__right__list__link\"\r\n                  onMouseEnter={handleMouseEnter}\r\n                  onMouseLeave={handleMouseLeave}\r\n                >\r\n                  <ImPlus />\r\n                </a>\r\n                {showToolTip ? (\r\n                  <div className=\"navbarwrapp__right__tooltip\">\r\n                    <span>\r\n                      Can't find a movie or TV show?\r\n                      <br /> Login to create it.\r\n                    </span>\r\n                  </div>\r\n                ) : (\r\n                  \"\"\r\n                )}\r\n              </li>\r\n              <li className=\"navbarwrapp__right__list__item\">\r\n                <button\r\n                  className=\"btn btn--navbar\"\r\n                  onClick={showLang}\r\n                  style={showlang ? { background: \"white\", color: \"#000\" } : {}}\r\n                >\r\n                  EN\r\n                </button>\r\n                {showlang ? (\r\n                  <div className=\"navbarwrapp__right__tooltip navbarwrapp__right__tooltip--lang\">\r\n                    <h3>Language Preferences</h3>\r\n                    <Select\r\n                      options={languages}\r\n                      onChange={setSelectedOption}\r\n                      defaultValue={selectedOption}\r\n                    />\r\n                  </div>\r\n                ) : (\r\n                  \"\"\r\n                )}\r\n              </li>\r\n              <li className=\"navbarwrapp__right__list__item\">\r\n                <a href=\"#\" className=\"navbarwrapp__right__list__link\">\r\n                  <span>Login</span>\r\n                </a>\r\n              </li>\r\n              <li className=\"navbarwrapp__right__list__item\">\r\n                {showSearch ? (\r\n                  <button className=\"btn btn--navbarclosesearch\">\r\n                    <MdClose\r\n                      style={{ width: \"2em\", height: \"2em\" }}\r\n                      onClick={hideSearchTab}\r\n                    />\r\n                  </button>\r\n                ) : (\r\n                  <button className=\"btn btn--navbarsearch\"  onClick={showSearchTab}>\r\n                    <SearchOutlinedIcon\r\n                      style={{ color: \"#1acee0\", fontWeight: \"bold\", width: \"2em\", height: \"2em\"}}\r\n                     \r\n                    />\r\n                  </button>\r\n                )}\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {showSearch ? (\r\n        <SearchSlide showSearch={showSearch} />\r\n      ) : (\r\n        <SearchSlide showSearch={showSearch} />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","F:\\REACT\\movie-app\\src\\components\\People\\Popular.tsx",[],"F:\\REACT\\movie-app\\src\\components\\SearchResultsPage\\ResultsPage.tsx",[],"F:\\REACT\\movie-app\\src\\components\\SearchResultsPage\\SearchResults.tsx",[],"F:\\REACT\\movie-app\\src\\components\\SearchResultsPage\\SearchResultsItems.tsx",[],"F:\\REACT\\movie-app\\src\\components\\SearchResultsPage\\SerachResult\\Collections.tsx",[],"F:\\REACT\\movie-app\\src\\components\\SearchResultsPage\\SerachResult\\Movie.tsx",[],"F:\\REACT\\movie-app\\src\\components\\SearchResultsPage\\SerachResult\\Person.tsx",[],"F:\\REACT\\movie-app\\src\\components\\SearchResultsPage\\SerachResult\\Tvs.tsx",[],"F:\\REACT\\movie-app\\src\\components\\Store\\Reducers\\HomePageReducer.tsx",["578","579"],"import {Dispatch} from 'redux';\r\nimport {ThunkAction} from 'redux-thunk';\r\nimport {getHomePgeApi, getLangsApi, getMoviesApi} from '../../../Api/Api';\r\nimport {\r\n  LangsType,\r\n  NowPlayingObjectType,\r\n  PopularObjectType,\r\n  PopularTvObjectType,\r\n  TopRatedObjectType,\r\n  TraidingsType,\r\n  UpComingObjectType,\r\n  VideoType,\r\n} from '../../../Types/Types';\r\nimport {AppStateType} from '../store';\r\n\r\nconst GET_POPULAR_MOVIES = 'GET_POPULAR_MOVIES';\r\nconst GET_CURRENT_PAGE = 'GET_CURRENT_PAGE';\r\nconst GET_NOW_PLAYING = 'GET_NOW_PLAYING';\r\nconst GET_NOW_TVPLAYING = 'GET_NOW_TVPLAYING';\r\nconst GET_AIRING_TODAY = 'GET_AIRING_TODAY';\r\nconst GET_ON_TV = 'GET_ON_TV';\r\nconst GET__TOP__RATED__TV = 'GET__TOP__RATED__TV';\r\n//const GET_SEARCH_MOVIES = 'GET_SEARCH_MOVIES';\r\nconst GET_TRAILERS = 'GET_TRAILERS';\r\nconst GET_TREDINGS = 'GET_TREDINGS';\r\nconst GET_UPCOMING = 'GET_UPCOMING';\r\nconst GET__TOP__RATED = 'GET__TOP__RATED';\r\nconst FETCHING = 'FETCHING';\r\nconst LANG_SELECTED = 'LANG_SELECTED';\r\n\r\nconst initialState = {\r\n  popularMovies: null as PopularObjectType | null,\r\n  currentPage: 1,\r\n  nowPlaying: null as NowPlayingObjectType | null,\r\n  nowTvPlaying: null as PopularTvObjectType | null,\r\n  airingToday: null as PopularTvObjectType | null,\r\n  onTv: null as PopularTvObjectType | null,\r\n  topRatedTv: null as PopularTvObjectType | null,\r\n  trailers: [] as Array<VideoType>,\r\n  traidings: [] as Array<TraidingsType>,\r\n  upComing: null as UpComingObjectType | null,\r\n  topRated: null as TopRatedObjectType | null,\r\n  fetching: true,\r\n  langSlected: 'en-En' as string,\r\n};\r\n\r\ntype initialStateType = typeof initialState;\r\n\r\ntype ActionsTypes =\r\n  | GetPopularType\r\n  | GetCurrentPageType\r\n  | GetNowPlayingType\r\n  | GetNowTvPlaingType\r\n  | GetAiringTodayType\r\n  | GetOnTvType\r\n  | GetTopRatedTvType\r\n  | GetTrailersType\r\n  | GetTraidingsType\r\n  | GetUpComingType\r\n  | GetTopRatedtype\r\n  | FetchingType\r\n  | LangSelectedType;\r\n\r\n\r\ntype DispatchType = Dispatch<ActionsTypes>;\r\ntype GetStateType = () => AppStateType;\r\ntype ThunkType = ThunkAction<\r\n  Promise<void>,\r\n  AppStateType,\r\n  unknown,\r\n  ActionsTypes\r\n>;\r\n\r\nconst homePageReducer = (\r\n  state = initialState,\r\n  action: ActionsTypes\r\n): initialStateType => {\r\n  switch (action.type) {\r\n    case GET_POPULAR_MOVIES: {\r\n      return {\r\n        ...state,\r\n        popularMovies: action.popularMovies,\r\n      };\r\n    }\r\n    // case GET_CURRENT_PAGE: {\r\n    //   return {\r\n    //     ...state,\r\n    //     currentPage: action.currentPage,\r\n    //   };\r\n    // }\r\n    \r\n    case GET_NOW_PLAYING: {\r\n      return {\r\n        ...state,\r\n        nowPlaying: action.nowPlaying,\r\n      };\r\n    }\r\n    case GET_NOW_TVPLAYING: {\r\n      return {\r\n        ...state,\r\n        nowTvPlaying: action.nowTvPlaying,\r\n      };\r\n    }\r\n    case GET_AIRING_TODAY: {\r\n      return {\r\n        ...state,\r\n        airingToday: action.airingToday,\r\n      };\r\n    }\r\n    case GET_ON_TV: {\r\n      return {\r\n        ...state,\r\n        onTv: action.onTv,\r\n      };\r\n    }\r\n    case GET__TOP__RATED__TV: {\r\n      return {\r\n        ...state,\r\n        topRatedTv: action.topRatedTv,\r\n      };\r\n    }\r\n\r\n    case GET_TRAILERS: {\r\n      return {\r\n        ...state,\r\n        trailers: action.trailers,\r\n      };\r\n    }\r\n    case GET_TREDINGS: {\r\n      return {\r\n        ...state,\r\n        traidings: action.traidings,\r\n      };\r\n    }\r\n    case GET_UPCOMING: {\r\n      return {\r\n        ...state,\r\n        upComing: action.upComing,\r\n      };\r\n    }\r\n    case GET__TOP__RATED: {\r\n      return {\r\n        ...state,\r\n        topRated: action.topRated,\r\n      };\r\n    }\r\n    case FETCHING: {\r\n      return {\r\n        ...state,\r\n        fetching: action.fetching,\r\n      };\r\n    }\r\n    case LANG_SELECTED: {\r\n      return {\r\n        ...state,\r\n        langSlected: action.langSlected,\r\n      };\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n//Popular Movies\r\ntype GetPopularType = {\r\n  type: typeof GET_POPULAR_MOVIES;\r\n  popularMovies: PopularObjectType;\r\n};\r\n\r\nexport const getPopularMovies = (\r\n  popularMovies: PopularObjectType\r\n): GetPopularType => {\r\n  return {type: GET_POPULAR_MOVIES, popularMovies};\r\n};\r\n//\r\ntype GetCurrentPageType = {\r\n  type: typeof GET_CURRENT_PAGE;\r\n  currentPage: number;\r\n};\r\n\r\nexport const getCurrentPage = (currentPage: number): GetCurrentPageType => {\r\n  return {type: GET_CURRENT_PAGE, currentPage};\r\n};\r\n\r\n\r\n\r\n\r\n//\r\ntype GetNowPlayingType = {\r\n  type: typeof GET_NOW_PLAYING;\r\n  nowPlaying: NowPlayingObjectType;\r\n};\r\n\r\nexport const getNowPlaying = (\r\n  nowPlaying: NowPlayingObjectType\r\n): GetNowPlayingType => {\r\n  return {type: GET_NOW_PLAYING, nowPlaying};\r\n};\r\n// TV\r\ntype GetNowTvPlaingType = {\r\n  type: typeof GET_NOW_TVPLAYING;\r\n  nowTvPlaying: PopularTvObjectType;\r\n};\r\n\r\nexport const getNowTvPlaying = (\r\n  nowTvPlaying: PopularTvObjectType\r\n): GetNowTvPlaingType => {\r\n  return {type: GET_NOW_TVPLAYING, nowTvPlaying};\r\n};\r\ntype GetAiringTodayType = {\r\n  type: typeof GET_AIRING_TODAY;\r\n  airingToday: PopularTvObjectType;\r\n};\r\n\r\nexport const getAiringToday = (\r\n  airingToday: PopularTvObjectType\r\n): GetAiringTodayType => {\r\n  return {type: GET_AIRING_TODAY, airingToday};\r\n};\r\ntype GetOnTvType = {\r\n  type: typeof GET_ON_TV;\r\n  onTv: PopularTvObjectType;\r\n};\r\n\r\nexport const getOnTv = (onTv: PopularTvObjectType): GetOnTvType => {\r\n  return {type: GET_ON_TV, onTv};\r\n};\r\ntype GetTopRatedTvType = {\r\n  type: typeof GET__TOP__RATED__TV;\r\n  topRatedTv: PopularTvObjectType;\r\n};\r\n\r\nexport const getTopRatedTv = (\r\n  topRatedTv: PopularTvObjectType\r\n): GetTopRatedTvType => {\r\n  return {type: GET__TOP__RATED__TV, topRatedTv};\r\n};\r\n//Trailers\r\ntype GetTrailersType = {\r\n  type: typeof GET_TRAILERS;\r\n  trailers: Array<VideoType>;\r\n};\r\n\r\nexport const getTrailers = (trailers: Array<VideoType>): GetTrailersType => {\r\n  return {type: GET_TRAILERS, trailers};\r\n};\r\n//Traidings\r\ntype GetTraidingsType = {\r\n  type: typeof GET_TREDINGS;\r\n  traidings: Array<TraidingsType>;\r\n};\r\nexport const getTraidings = (\r\n  traidings: Array<TraidingsType>\r\n): GetTraidingsType => {\r\n  return {type: GET_TREDINGS, traidings};\r\n};\r\n\r\ntype GetUpComingType = {\r\n  type: typeof GET_UPCOMING;\r\n  upComing: UpComingObjectType;\r\n};\r\n\r\nexport const getUpComing = (upComing: UpComingObjectType): GetUpComingType => {\r\n  return {type: GET_UPCOMING, upComing};\r\n};\r\n\r\n//\r\n\r\ntype GetTopRatedtype = {\r\n  type: typeof GET__TOP__RATED;\r\n  topRated: TopRatedObjectType;\r\n};\r\n\r\nexport const getTopRated = (topRated: TopRatedObjectType): GetTopRatedtype => {\r\n  return {type: GET__TOP__RATED, topRated};\r\n};\r\n\r\ntype FetchingType = {\r\n  type: typeof FETCHING;\r\n  fetching: boolean;\r\n};\r\nexport const getFetching = (fetching: boolean): FetchingType => {\r\n  return {type: FETCHING, fetching};\r\n};\r\n\r\ntype LangSelectedType = {\r\n  type: typeof LANG_SELECTED;\r\n  langSlected: string;\r\n};\r\n\r\nexport const getLangSelected = (langSlected: string): LangSelectedType => {\r\n  return {type: LANG_SELECTED, langSlected};\r\n};\r\n\r\n//Thunk\r\n\r\n//Movies\r\nexport const requestPopularMovies = (currentPage: number): ThunkType => async (\r\n  dispatch: DispatchType,\r\n  getState: GetStateType\r\n): Promise<void> => {\r\n  dispatch(getFetching(true));\r\n  dispatch(getCurrentPage(currentPage));\r\n  const res = await getHomePgeApi.getPopular(currentPage);\r\n  // console.log(res)\r\n  dispatch(getPopularMovies(res));\r\n  dispatch(getFetching(false));\r\n};\r\nexport const requestNowPlaying = (currentPage: number): ThunkType => async (\r\n  dispatch: DispatchType\r\n) => {\r\n  dispatch(getFetching(true));\r\n  dispatch(getCurrentPage(currentPage));\r\n  const res = await getHomePgeApi.getNowPlaying(currentPage);\r\n  // console.log(res)\r\n  dispatch(getNowPlaying(res));\r\n  dispatch(getFetching(false));\r\n};\r\n\r\nexport const requestUpComing = (currentPage: number): ThunkType => async (\r\n  dispatch: DispatchType\r\n) => {\r\n  dispatch(getFetching(true));\r\n  dispatch(getCurrentPage(currentPage));\r\n  const res = await getHomePgeApi.getUpcomming(currentPage);\r\n  // console.log(res);\r\n  dispatch(getUpComing(res));\r\n  dispatch(getFetching(false));\r\n};\r\n\r\nexport const requestTopRated = (currentPage: number): ThunkType => async (\r\n  dispatch: DispatchType\r\n) => {\r\n  dispatch(getFetching(true));\r\n  dispatch(getCurrentPage(currentPage));\r\n  const res = await getHomePgeApi.getTopRated(currentPage);\r\n  console.log(res);\r\n  dispatch(getTopRated(res));\r\n  dispatch(getFetching(false));\r\n};\r\n\r\nexport const requestTrailers = (movieId: number): ThunkType => async (\r\n  dispatch: DispatchType\r\n) => {\r\n  const res = await getMoviesApi.getVideos(movieId);\r\n  dispatch(getTrailers(res));\r\n};\r\n\r\nexport const requestTraidings = (value: string): ThunkType => async (\r\n  dispatch: DispatchType\r\n) => {\r\n  dispatch(getFetching(true));\r\n  const res = await getHomePgeApi.getTraidings(value);\r\n  dispatch(getTraidings(res));\r\n  dispatch(getFetching(false));\r\n};\r\n///TV\r\nexport const requestNowTvPlaying = (currentPage: number): ThunkType => async (\r\n  dispatch: DispatchType\r\n) => {\r\n  dispatch(getFetching(true));\r\n  const res = await getHomePgeApi.getNowTvPlaying(currentPage);\r\n  dispatch(getNowTvPlaying(res));\r\n  dispatch(getFetching(false));\r\n};\r\nexport const requestAiringToday = (currentPage: number): ThunkType => async (\r\n  dispatch: DispatchType\r\n) => {\r\n  dispatch(getFetching(true));\r\n  const res = await getHomePgeApi.geAiringTodayTv(currentPage);\r\n  dispatch(getAiringToday(res));\r\n  dispatch(getFetching(false));\r\n};\r\nexport const requestOnTv = (currentPage: number): ThunkType => async (\r\n  dispatch: DispatchType\r\n) => {\r\n  dispatch(getFetching(true));\r\n  const res = await getHomePgeApi.getOnTv(currentPage);\r\n  dispatch(getOnTv(res));\r\n  dispatch(getFetching(false));\r\n};\r\nexport const requestTopRatedTv = (currentPage: number): ThunkType => async (\r\n  dispatch: DispatchType\r\n) => {\r\n  dispatch(getFetching(true));\r\n  const res = await getHomePgeApi.getTopRatedTv(currentPage);\r\n  dispatch(getTopRatedTv(res));\r\n  dispatch(getFetching(false));\r\n};\r\n\r\nexport const getSelectedLang = (lang: any): ThunkType => async (\r\n  dispatch: DispatchType\r\n) => {\r\n  dispatch(getLangSelected(lang));\r\n};\r\n\r\nexport default homePageReducer;\r\n","F:\\REACT\\movie-app\\src\\components\\Store\\Reducers\\LangReducer.tsx",["580"],"import {Dispatch} from 'react';\r\nimport {ThunkAction} from 'redux-thunk';\r\nimport {getLangsApi} from '../../../Api/Api';\r\nimport {LangsType} from '../../../Types/Types';\r\nimport {AppStateType} from '../store';\r\n\r\nconst GET_LANGS = 'GET_LANGS';\r\nconst GET_TRANSLATIONS = 'GET_TRANSLATIONS';\r\nconst LANG_SELECTED = 'LANG_SELECTED';\r\n\r\nconst initialState = {\r\n  languages: [] as Array<LangsType>,\r\n  translations: [] as Array<string>,\r\n  // langSlected: null as LangsType | null,\r\n};\r\n\r\ntype initialStateType = typeof initialState;\r\n\r\ntype ActionsTypes = GetLangsType | GetTranslationsType /* | LangSelectedType */;\r\n\r\ntype DispatchType = Dispatch<ActionsTypes>;\r\ntype ThunkType = ThunkAction<\r\n  Promise<void>,\r\n  AppStateType,\r\n  unknown,\r\n  ActionsTypes\r\n>;\r\n\r\nconst langsReducer = (\r\n  state = initialState,\r\n  action: ActionsTypes\r\n): initialStateType => {\r\n  switch (action.type) {\r\n    case GET_LANGS: {\r\n      return {\r\n        ...state,\r\n        languages: action.languages,\r\n      };\r\n    }\r\n    case GET_TRANSLATIONS: {\r\n      return {\r\n        ...state,\r\n        translations: action.translations,\r\n      };\r\n    }\r\n\r\n    // case LANG_SELECTED: {\r\n    //   return {\r\n    //     ...state,\r\n    //     langSlected: action.langSlected,\r\n    //   };\r\n    // }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\ntype GetLangsType = {\r\n  type: typeof GET_LANGS;\r\n  languages: Array<LangsType>;\r\n};\r\n\r\nexport const getLangs = (languages: Array<LangsType>): GetLangsType => {\r\n  return {type: GET_LANGS, languages};\r\n};\r\n\r\ntype GetTranslationsType = {\r\n  type: typeof GET_TRANSLATIONS;\r\n  translations: Array<string>;\r\n};\r\nexport const getTranslations = (\r\n  translations: Array<string>\r\n): GetTranslationsType => {\r\n  return {type: GET_TRANSLATIONS, translations};\r\n};\r\n\r\n// type LangSelectedType = {\r\n//   type: typeof LANG_SELECTED;\r\n//   langSlected: LangsType;\r\n// };\r\n\r\n// export const getLangSelected = (langSlected: LangsType): LangSelectedType => {\r\n//   return {type: LANG_SELECTED, langSlected};\r\n// };\r\n\r\nexport const requestLangs = (): ThunkType => async (dispatch: DispatchType) => {\r\n  const res = await getLangsApi.getLangs();\r\n  dispatch(getLangs(res));\r\n};\r\nexport const requestTranslations = (): ThunkType => async (\r\n  dispatch: DispatchType\r\n) => {\r\n  const res = await getLangsApi.getTranslations();\r\n  dispatch(getTranslations(res));\r\n};\r\n\r\n\r\nexport default langsReducer;\r\n","F:\\REACT\\movie-app\\src\\components\\Store\\Reducers\\MovieListReducer.tsx",[],"F:\\REACT\\movie-app\\src\\components\\Store\\Reducers\\PeopleReducer.tsx",["581"],"import { Dispatch } from \"redux\";\r\nimport { ThunkAction } from \"redux-thunk\";\r\nimport { getPeopleApi } from \"../../../Api/Api\";\r\nimport {\r\n  CombineCreditsCrewType,\r\n  CombinedCreditsCastType,\r\n  DetailType,\r\n  ExternalIdsType,\r\n  PopularPeopleObjectType,\r\n} from \"../../../Types/Types\";\r\nimport { AppStateType } from \"../store\";\r\n\r\nconst GET_DETAIL = \"GET_DETAIL\";\r\nconst GET_COMBINE_CREDITS_CAST = \"GET__COMBINE_CREDITS_CAST\";\r\nconst GET_COMBINE_CREDITS_CREW = \"GET__COMBINE_CREDITS_CREW\";\r\nconst GET_EXTERNAL_ID = \"GET_EXTERNAL_ID\";\r\nconst GET_POPULAR_PEOPLE = \"GET_POPULAR_PEOPLE\";\r\n\r\nconst initialState = {\r\n  detail: null as DetailType | null,\r\n  combinedCreditsCast: [] as Array<CombinedCreditsCastType>,\r\n  combinedCreditsCrew: [] as Array<CombineCreditsCrewType>,\r\n  social: null as ExternalIdsType | null,\r\n  popularPeople: null as PopularPeopleObjectType | null,\r\n};\r\ntype initialStateType = typeof initialState;\r\n\r\ntype ActionsTypes =\r\n  | GetPeopleDetailType\r\n  | GetCombineCastType\r\n  | GetCombineCrewType\r\n  | GetSocialType\r\n  | GetPopularPeopleType\r\n\r\n  type DispatchType = Dispatch<ActionsTypes>\r\n  type GetStateType = ()=> AppStateType\r\n  type ThunkType =ThunkAction<Promise<void>, AppStateType, unknown, ActionsTypes>\r\n\r\nconst peopleReducer = (state = initialState, action: ActionsTypes): initialStateType => {\r\n  switch (action.type) {\r\n    case GET_DETAIL: {\r\n      return {\r\n        ...state,\r\n        detail: action.detail,\r\n      };\r\n    }\r\n\r\n    case GET_COMBINE_CREDITS_CAST: {\r\n      return {\r\n        ...state,\r\n        combinedCreditsCast: action.combinedCreditsCast,\r\n      };\r\n    }\r\n    case GET_COMBINE_CREDITS_CREW: {\r\n      return {\r\n        ...state,\r\n        combinedCreditsCrew: action.combinedCreditsCrew,\r\n      };\r\n    }\r\n    case GET_EXTERNAL_ID: {\r\n      return {\r\n        ...state,\r\n        social: action.social,\r\n      };\r\n    }\r\n    case GET_POPULAR_PEOPLE: {\r\n      return {\r\n        ...state,\r\n        popularPeople: action.popularPeople,\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n//Actions\r\n\r\n//Detail\r\ntype GetPeopleDetailType = {\r\n  type: typeof GET_DETAIL;\r\n  detail: DetailType;\r\n};\r\n\r\nexport const getPeopleDetail = (detail: DetailType): GetPeopleDetailType => {\r\n  return { type: GET_DETAIL, detail };\r\n};\r\n\r\n//CombineCreditsCast\r\ntype GetCombineCastType = {\r\n  type: typeof GET_COMBINE_CREDITS_CAST;\r\n  combinedCreditsCast: Array<CombinedCreditsCastType>\r\n};\r\nexport const getCombineCreditsCast = (\r\n  combinedCreditsCast:Array<CombinedCreditsCastType>\r\n): GetCombineCastType => {\r\n  return { type: GET_COMBINE_CREDITS_CAST, combinedCreditsCast };\r\n};\r\n//CombineCreditsCrew\r\ntype GetCombineCrewType = {\r\n  type: typeof GET_COMBINE_CREDITS_CREW;\r\n  combinedCreditsCrew:Array<CombineCreditsCrewType>;\r\n};\r\n\r\nexport const getCombineCreditsCrew = (\r\n  combinedCreditsCrew: Array<CombineCreditsCrewType>\r\n): GetCombineCrewType => {\r\n  return { type: GET_COMBINE_CREDITS_CREW, combinedCreditsCrew };\r\n};\r\n\r\n// Social\r\ntype GetSocialType = {\r\n  type: typeof GET_EXTERNAL_ID;\r\n  social: ExternalIdsType;\r\n};\r\nexport const getSocial = (social: ExternalIdsType): GetSocialType => {\r\n  return { type: GET_EXTERNAL_ID, social };\r\n};\r\n//Popular\r\ntype GetPopularPeopleType = {\r\n  type: typeof GET_POPULAR_PEOPLE;\r\n  popularPeople: PopularPeopleObjectType;\r\n};\r\nexport const getPopularPeolple = (\r\n  popularPeople: PopularPeopleObjectType\r\n): GetPopularPeopleType => {\r\n  return { type: GET_POPULAR_PEOPLE, popularPeople };\r\n};\r\n\r\n//Thunk\r\nexport const requestDetail = (personId: string):ThunkType => async (dispatch: DispatchType) => {\r\n  const res = await getPeopleApi.getDetails(personId);\r\n  dispatch(getPeopleDetail(res));\r\n};\r\n\r\nexport const requestCombineCast = (personId: string):ThunkType => async (\r\n  dispatch: DispatchType\r\n) => {\r\n  const res = await getPeopleApi.getCombinedCreditsCast(personId);\r\n  dispatch(getCombineCreditsCast(res));\r\n};\r\nexport const requestCombineCrew = (personId: string):ThunkType => async (\r\n  dispatch: DispatchType\r\n) => {\r\n  const res = await getPeopleApi.getCombinedCreditsCrew(personId);\r\n  dispatch(getCombineCreditsCrew(res));\r\n};\r\nexport const requestSocial = (personId: string):ThunkType => async (dispatch: DispatchType) => {\r\n  const res = await getPeopleApi.getExternalId(personId);\r\n  dispatch(getSocial(res));\r\n};\r\n\r\nexport const requestPopularPeople = (currentPage: number):ThunkType => async (\r\n  dispatch: DispatchType\r\n) => {\r\n  const res = await getPeopleApi.getPopular(currentPage);\r\n  dispatch(getPopularPeolple(res));\r\n};\r\n\r\nexport default peopleReducer;\r\n","F:\\REACT\\movie-app\\src\\components\\Store\\Reducers\\SearchReducer.tsx",["582","583","584"],"import { Dispatch } from \"redux\";\r\nimport { ThunkAction } from \"redux-thunk\";\r\nimport { getSearchApi } from \"../../../Api/Api\";\r\nimport {\r\n  CollectionObjectType,\r\n  DetailType,\r\n  NowPlayngType,\r\n  SearchObjectType,\r\n} from \"../../../Types/Types\";\r\nimport { AppStateType } from \"../store\";\r\n\r\nconst GET__MOVIES = \"GET__MOVIES\";\r\nconst GET__TV = \"GET__TV\";\r\nconst GET__PEOPLE = \"GET__PEOPLE\";\r\nconst GET__SEARCH__QUERY = \"GET__SEARCH__QUERY\";\r\nconst GET__COLLECTIONS = \"GET_COLLECTIONS\";\r\nconst TOTAL__PAGES = \"TOTAL__PAGES\";\r\nconst CURRENT__PAGE = \"CURRENT__PAGE\";\r\n\r\n//const GET__KEYWORDS ='GET__KEYWORDS'\r\n// const GET__COMPANIES ='GET__COMPANIES'\r\n//const GET__MULTI = 'GET__MULTI'\r\n\r\nconst initialState = {\r\n  searchMovies: null as SearchObjectType | null,\r\n  searchTv: null as SearchObjectType | null,\r\n  searchPeople: null as SearchObjectType | null,\r\n  searchCollection: null as CollectionObjectType | null,\r\n  searchQuery: \"\",\r\n  totalPages: 0,\r\n  currentPage: 1,\r\n\r\n  // searchMovies = [] as Array<NowPlayngType>\r\n};\r\n\r\ntype initialStateType = typeof initialState;\r\n\r\ntype ActionsTypes =\r\n  | GetMoviesType\r\n  | GetTvType\r\n  | GetPeopleType\r\n  | GetPeopleType\r\n  | GetCollectionsType\r\n  | GetSearchQueryType\r\n  | TotalPagesType\r\n  | CurrentPagesType;\r\n\r\n  type DispatchType = Dispatch<ActionsTypes>\r\n  type GetStateType = ()=> AppStateType\r\n  type ThunkType =ThunkAction<Promise<void>, AppStateType, unknown, ActionsTypes>\r\n\r\nconst searchReducer = (\r\n  state = initialState,\r\n  action: ActionsTypes\r\n): initialStateType => {\r\n  switch (action.type) {\r\n    case GET__MOVIES: {\r\n      return {\r\n        ...state,\r\n        searchMovies: action.searchMovies,\r\n      };\r\n    }\r\n    case GET__SEARCH__QUERY: {\r\n      return {\r\n        ...state,\r\n        searchQuery: action.searchQuery,\r\n      };\r\n    }\r\n    case GET__TV: {\r\n      return {\r\n        ...state,\r\n        searchTv: action.searchTv,\r\n      };\r\n    }\r\n    case GET__PEOPLE: {\r\n      return {\r\n        ...state,\r\n        searchPeople: action.searchPeople,\r\n      };\r\n    }\r\n    case GET__COLLECTIONS: {\r\n      return {\r\n        ...state,\r\n        searchCollection: action.searchCollection,\r\n      };\r\n    }\r\n    case TOTAL__PAGES: {\r\n      return {\r\n        ...state,\r\n        totalPages: action.totalPages,\r\n      };\r\n    }\r\n    case CURRENT__PAGE: {\r\n      return {\r\n        ...state,\r\n        currentPage: action.currentPage,\r\n      };\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\ntype GetMoviesType = {\r\n  type: typeof GET__MOVIES;\r\n  searchMovies: SearchObjectType;\r\n};\r\n\r\nexport const getMovies = (searchMovies: SearchObjectType): GetMoviesType => {\r\n  return { type: GET__MOVIES, searchMovies };\r\n};\r\ntype GetTvType = {\r\n  type: typeof GET__TV;\r\n  searchTv: SearchObjectType;\r\n};\r\n\r\nexport const getTv = (searchTv: SearchObjectType): GetTvType => {\r\n  return { type: GET__TV, searchTv };\r\n};\r\ntype GetPeopleType = {\r\n  type: typeof GET__PEOPLE;\r\n  searchPeople: SearchObjectType;\r\n};\r\n\r\nexport const getPeople = (searchPeople: SearchObjectType): GetPeopleType => {\r\n  return { type: GET__PEOPLE, searchPeople };\r\n};\r\n\r\ntype GetCollectionsType = {\r\n  type: typeof GET__COLLECTIONS;\r\n  searchCollection: CollectionObjectType;\r\n};\r\n\r\nexport const getCollections = (\r\n  searchCollection: CollectionObjectType\r\n): GetCollectionsType => {\r\n  return { type: GET__COLLECTIONS, searchCollection };\r\n};\r\n//Query String\r\ntype GetSearchQueryType = {\r\n  type: typeof GET__SEARCH__QUERY;\r\n  searchQuery: string;\r\n};\r\n\r\nexport const getSerachQuery = (searchQuery: string): GetSearchQueryType => {\r\n  return { type: GET__SEARCH__QUERY, searchQuery };\r\n};\r\n//Total Pages\r\ntype TotalPagesType = {\r\n  type: typeof TOTAL__PAGES;\r\n  totalPages: number;\r\n};\r\nexport const getTotalPages = (totalPages: number): TotalPagesType => {\r\n  return { type: TOTAL__PAGES, totalPages };\r\n};\r\n//Current Page\r\n\r\ntype CurrentPagesType = {\r\n  type: typeof CURRENT__PAGE;\r\n  currentPage: number;\r\n};\r\nexport const getCurrentPage = (currentPage: number): CurrentPagesType => {\r\n  return { type: CURRENT__PAGE, currentPage };\r\n};\r\n\r\nexport const requestSearchQuery = (query: string) => async (dispatch: DispatchType) => {\r\n  dispatch(getSerachQuery(query));\r\n};\r\n\r\nexport const requestTotalPages = (totalPages: number) => async (\r\n  dispatch: DispatchType\r\n) => {\r\n  dispatch(getTotalPages(totalPages));\r\n};\r\n\r\nexport const requestSearchMovie = (\r\n  query: string,\r\n  currentPage: number\r\n):ThunkType => async (dispatch: DispatchType) => {\r\n  const res = await getSearchApi.getMovies(query, currentPage);\r\n  //console.log('Movies',res);\r\n  dispatch(getCurrentPage(currentPage));\r\n  dispatch(getMovies(res));\r\n  dispatch(getTotalPages(res?.total_pages));\r\n};\r\n\r\nexport const requestSearchTv = (query: string, currentPage: number):ThunkType => async (\r\n  dispatch: DispatchType\r\n) => {\r\n  const res = await getSearchApi.getTv(query, currentPage);\r\n  //console.log('TV',res);\r\n  dispatch(getTv(res));\r\n  dispatch(getCurrentPage(currentPage));\r\n  dispatch(getTotalPages(res?.total_pages));\r\n};\r\nexport const requestSearchPeople = (\r\n  query: string,\r\n  currentPage: number\r\n):ThunkType => async (dispatch: DispatchType) => {\r\n  const res = await getSearchApi.getPeople(query, currentPage);\r\n  //console.log(\"Pep\", res);\r\n  dispatch(getPeople(res));\r\n  dispatch(getCurrentPage(currentPage));\r\n  dispatch(getTotalPages(res?.total_pages));\r\n};\r\nexport const requestSearchCollections = (\r\n  query: string,\r\n  currentPage: number\r\n):ThunkType => async (dispatch: DispatchType) => {\r\n  const res = await getSearchApi.getCollection(query, currentPage);\r\n  //console.log(\"collections\", res);\r\n  dispatch(getCollections(res));\r\n  dispatch(getCurrentPage(currentPage));\r\n  dispatch(getTotalPages(res?.total_pages));\r\n};\r\n\r\nexport default searchReducer;\r\n","F:\\REACT\\movie-app\\src\\components\\Store\\Selectors\\HomePageSelector.tsx",[],"F:\\REACT\\movie-app\\src\\components\\Store\\Selectors\\LangSelector.tsx",[],"F:\\REACT\\movie-app\\src\\components\\Store\\Selectors\\MovieSelector.tsx",[],"F:\\REACT\\movie-app\\src\\components\\Store\\Selectors\\PeopleSelector.tsx",[],"F:\\REACT\\movie-app\\src\\components\\Store\\Selectors\\SearchSelector.tsx",[],"F:\\REACT\\movie-app\\src\\components\\Store\\store.tsx",[],"F:\\REACT\\movie-app\\src\\components\\Tv\\AiringToday.tsx",[],"F:\\REACT\\movie-app\\src\\components\\Tv\\OnTv.tsx",[],"F:\\REACT\\movie-app\\src\\components\\Tv\\PopularTv.tsx",[],"F:\\REACT\\movie-app\\src\\components\\Tv\\TopRatedTv.tsx",[],"F:\\REACT\\movie-app\\src\\Hoc\\withHeaderFooter.tsx",[],"F:\\REACT\\movie-app\\src\\Hoc\\withmovies.tsx",[],"F:\\REACT\\movie-app\\src\\index.tsx",[],"F:\\REACT\\movie-app\\src\\react-app-env.d.ts",[],"F:\\REACT\\movie-app\\src\\reportWebVitals.ts",[],"F:\\REACT\\movie-app\\src\\setupTests.ts",[],"F:\\REACT\\movie-app\\src\\Types\\Types.tsx",[],"F:\\REACT\\movie-app\\src\\TvCard\\CardActors.tsx",[],"F:\\REACT\\movie-app\\src\\TvCard\\CardInfo.tsx",["585","586"],"import React from \"react\";\r\nimport SocialComp from \"../components/Common/SocialComp\";\r\nimport { ExternalIdsType, KeywordsType, TvDetailType } from \"../Types/Types\";\r\n\r\ntype PropType = {\r\n  details: TvDetailType | null;\r\n  keywords: Array<KeywordsType>;\r\n  social: ExternalIdsType | null\r\n};\r\n\r\nconst CardInfo = ({ details, keywords,social }: PropType) => {\r\n  return (\r\n    <div className=\"cardInfoWrapp\">\r\n      <ul className=\"cardInfoList\">\r\n      <li className=\"cardInfoList__item\">\r\n          <SocialComp social={social}/>\r\n        </li>\r\n        <li className=\"cardInfoList__item\">\r\n          <span className=\"cardInfoList__item__header\">Status</span>\r\n          <br />\r\n          <span className=\"cardInfoList__item__info\">{details?.status}</span>\r\n        </li>\r\n        <li className=\"cardInfoList__item\">\r\n          <span className=\"cardInfoList__item__header\">Original Language</span>\r\n          <br />\r\n          <span className=\"cardInfoList__item__info\">\r\n            {details?.spoken_languages.map((l) => l.name)}\r\n          </span>\r\n        </li>\r\n        <li className=\"cardInfoList__item\">\r\n          <span className=\"cardInfoList__item__header\">Networks</span>\r\n          <br />\r\n          {details?.networks.map((item) => (\r\n            <img src={`https://image.tmdb.org/t/p/w500${item.logo_path}`}  key={item.id}/>\r\n          ))}\r\n        </li>\r\n        <li className=\"cardInfoList__item\">\r\n          <span className=\"cardInfoList__item__header\">Type</span>\r\n            \r\n          <br />\r\n          <span className=\"cardInfoList__item__info\">{details?.type}</span>\r\n        </li>\r\n      </ul>\r\n      <div className=\"keywordsWrapp\">\r\n        <h4>Keywords</h4>\r\n        <ul className=\"keywordsWrapp__list\">\r\n          {keywords.map((k) => (\r\n            <li className=\"keywordsWrapp__item\" key={k.id}>\r\n              <a href=\"#\" className=\"keywordsWrapp__link\">\r\n                {k.name}\r\n              </a>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardInfo;\r\n","F:\\REACT\\movie-app\\src\\TvCard\\CardMedia\\CardMedia.tsx",["587","588","589","590"],"import React from 'react';\r\nimport ArrowForwardRoundedIcon from '@material-ui/icons/ArrowForwardRounded';\r\nimport PlayCircleFilledWhiteRoundedIcon from '@material-ui/icons/PlayCircleFilledWhiteRounded';\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport { TvDetailType, VideoType} from '../../Types/Types';\r\nimport {allMedia} from '../../components/Helper/allMedia';\r\n\r\ntype PropsType = {\r\n  details: TvDetailType | null;\r\n  videos: Array<VideoType>;\r\n};\r\n\r\nconst CardMedia = ({details, videos=[]}: PropsType) => {\r\n  const allImg: Array<string> = [];\r\n  allMedia(\r\n    details?.backdrop_path === null\r\n      ? ''\r\n      : details?.poster_path,\r\n    details?.poster_path,\r\n    allImg\r\n  );\r\n  allMedia(\r\n    details?.backdrop_path === null\r\n      ? ''\r\n      : details?.backdrop_path,\r\n    details?.backdrop_path,\r\n    allImg\r\n  );\r\n  const addPrefix = allImg.map(\r\n    (item: string) => `https://image.tmdb.org/t/p/w500${item}`\r\n  );\r\n  const noImg = addPrefix.filter((i) => {\r\n    if (i.includes('.jpg')) return i;\r\n  });\r\n\r\n  return (\r\n    <div className=\"mediaWrapp\">\r\n      <div className=\"mediaWrapp__header\">\r\n        <h3 className=\"mediaWrapp__header-heading\">Media</h3>\r\n        <ul className=\"mediaWrapp__header-list\">\r\n          <li className=\"mediaWrapp__header-item\">\r\n            <Link\r\n              to=\"/allmedia\"\r\n              className=\"mediaWrapp__header-link mediaWrapp__header-link--active\"\r\n            >\r\n              All Media <span>{addPrefix.length + videos.length}</span>\r\n            </Link>\r\n          </li>\r\n          <li className=\"mediaWrapp__header-item\">\r\n            <a href=\"#\" className=\"mediaWrapp__header-link\">\r\n              Videos <span>{videos.length}</span>\r\n            </a>\r\n          </li>\r\n          <li className=\"mediaWrapp__header-item\">\r\n            <a href=\"#\" className=\"mediaWrapp__header-link\">\r\n              Backdrops <span>{addPrefix.slice(0, 2).length}</span>\r\n            </a>\r\n          </li>\r\n          <li className=\"mediaWrapp__header-item\">\r\n            <a href=\"#\" className=\"mediaWrapp__header-link\">\r\n              Posters <span>{addPrefix.slice(2, 4).length}</span>\r\n            </a>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n      <div className=\"mediaWrapp__wrapper\">\r\n        <div className=\"mediaWrapp__wrapper-media\">\r\n          {noImg.reverse().map((item: string, index: number) => (\r\n            <img src={item} alt=\"poster\" key={index} />\r\n          ))}\r\n          {videos.slice(0, 2).map((video) => (\r\n            <div className=\"mediaWrapp__wrapper-videolink\" key={video.id}>\r\n              {' '}\r\n              <a\r\n                className=\"mediaWrapp__wrapper-videolink-link\"\r\n                href={`https://www.youtube.com/watch?v=${video.key}`}\r\n                rel=\"noopener noreferrer\"\r\n                target=\"_blank\"\r\n              >\r\n                <PlayCircleFilledWhiteRoundedIcon />\r\n              </a>\r\n            </div>\r\n          ))}\r\n          <div>\r\n            <Link to=\"/allmedia\">\r\n              View More <ArrowForwardRoundedIcon />\r\n            </Link>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardMedia;\r\n","F:\\REACT\\movie-app\\src\\TvCard\\CardMedia\\CardMediaAll.tsx",[],"F:\\REACT\\movie-app\\src\\TvCard\\CardSocial\\CardSocial.tsx",["591"],"import React from \"react\";\r\nimport StarRateRoundedIcon from \"@material-ui/icons/StarRateRounded\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport { makeStyles, createStyles, Theme } from \"@material-ui/core/styles\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { ResultsType } from \"../../Types/Types\";\r\n\r\ntype PropsType = {\r\n  reviews: Array<ResultsType>;\r\n};\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      display: \"flex\",\r\n      \"& > *\": {\r\n        margin: theme.spacing(1),\r\n      },\r\n    },\r\n    small: {\r\n      width: theme.spacing(3),\r\n      height: theme.spacing(3),\r\n    },\r\n    large: {\r\n      width: theme.spacing(7),\r\n      height: theme.spacing(7),\r\n    },\r\n  })\r\n);\r\nconst CardMedia = ({ reviews=[] }: PropsType) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <div className=\"socialWrapp\">\r\n      <div className=\"socialWrapp__header\">\r\n        <h3 className=\"socialWrapp__header-heading\">Social</h3>\r\n        <ul className=\"socialWrapp__header-list\">\r\n          <li className=\"socialWrapp__header-item\">\r\n            <Link\r\n              to=\"/allreview\"\r\n              className=\"socialWrapp__header-link socialWrapp__header-link--active\"\r\n            >\r\n              Reviews <span>{reviews.length === undefined?'NO REVIEWS YET': reviews.length}</span>\r\n            </Link>\r\n          </li>\r\n          <li className=\"socialWrapp__header-item\">\r\n            <a href=\"#\" className=\"socialWrapp__header-link\">\r\n              Discussions <span>6</span>\r\n            </a>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n      {reviews.slice(0, 1).map((review) => (\r\n        <div className=\"socialWrapp__reviews\" key={review.id}>\r\n          <div className=\"socialWrapp__reviews-header\">\r\n            <Avatar style={{ marginRight: \"15px\" }} className={classes.large} />\r\n            <div>\r\n              <a href={review.url} target=\"_blank\" rel=\"noreferrer\">\r\n                <h3>\r\n                  A review by {review.author}{\" \"}\r\n                  <span>\r\n                    <StarRateRoundedIcon style={{ fontSize: 20 }} />\r\n                    6.0\r\n                  </span>\r\n                </h3>\r\n              </a>\r\n              <span>\r\n                Written by <b>{review.author}</b> on 4 April 2017\r\n              </span>\r\n            </div>\r\n          </div>\r\n          <div className=\"socialWrapp__reviews-body\">\r\n            <p>\r\n              {`${review.content.slice(0, 300)}...`}{\" \"}\r\n              <a\r\n                href={review.url}\r\n                target=\"_blank\"\r\n                rel=\"noreferrer\"\r\n                className=\"socialWrapp__reviews-link\"\r\n              >\r\n                read the rest\r\n              </a>\r\n            </p>\r\n          </div>\r\n        </div>\r\n      ))}\r\n      <h4>\r\n        <Link to=\"/allreview/\">Read All Reviews</Link>\r\n      </h4>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardMedia;\r\n","F:\\REACT\\movie-app\\src\\TvCard\\CardSocial\\CardSocialAll.tsx",[],"F:\\REACT\\movie-app\\src\\TvCard\\PopupTrailer.tsx",["592"],"import React from \"react\";\r\nimport { VideoType } from \"../Types/Types\";\r\nimport {CgClose} from 'react-icons/cg'\r\n \r\ntype StateType = {\r\n  playTrailer: boolean;\r\n};\r\n\r\ntype PropsType = {\r\n  videos: Array<VideoType>;\r\n  playState: StateType;\r\n  closePlay: () => void;\r\n};\r\n\r\nconst PopupTrailer = ({ videos=[], playState, closePlay }: PropsType) => {\r\n  const trailer = videos.filter((v) => v.type === \"Trailer\");\r\n  const key = trailer.find((t) => {\r\n   if (t.name.includes(\"Trailer\")) {\r\n      return t.key;\r\n    }\r\n  });\r\n\r\n  const width = window.innerWidth;\r\n\r\n  \r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className={\r\n          playState.playTrailer\r\n            ? \"popuptrailer popuptrailer--show\"\r\n            : \"popuptrailer\"\r\n        }\r\n      >\r\n        \r\n        <div className=\"popuptrailer__videobox \">\r\n        <div className=\"popuptrailer__header\">\r\n          <button onClick={closePlay} className=\"btn btn--close\">\r\n            <CgClose/>\r\n          </button>\r\n        </div>\r\n          <iframe\r\n            width=\"100%\"\r\n            height={width>900?'700':'500'}\r\n            src={`https://www.youtube.com/embed/${key?.key}`}\r\n            frameBorder=\"0\"\r\n            allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\r\n            allowFullScreen\r\n            title='movie trailer'\r\n          ></iframe>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PopupTrailer;\r\n","F:\\REACT\\movie-app\\src\\TvCard\\Recomandations\\CardRecomand.tsx",[],"F:\\REACT\\movie-app\\src\\TvCard\\TvCardContainer.tsx",[],"F:\\REACT\\movie-app\\src\\TvCard\\TvCardHeader.tsx",[],"F:\\REACT\\movie-app\\src\\components\\Store\\Reducers\\TvReducer.tsx",[],"F:\\REACT\\movie-app\\src\\components\\Store\\Selectors\\Tvselector.tsx",[],"F:\\REACT\\movie-app\\src\\TvCard\\PosterTv\\PosterStaffPage.tsx",[],"F:\\REACT\\movie-app\\src\\TvCard\\PosterTv\\StaffCard.tsx",[],"F:\\REACT\\movie-app\\src\\TvCard\\PosterTv\\StaffCardMovielist.tsx",[],"F:\\REACT\\movie-app\\src\\TvCard\\PosterTv\\StaffHeader.tsx",["593","594","595","596","597","598","599","600"],"F:\\REACT\\movie-app\\src\\TvCard\\PosterTv\\StaffKnowFor.tsx",["601","602","603","604","605","606","607","608"],"import React, { useState } from \"react\";\r\nimport { filterData, filterDepartament } from \"../../components/Helper/filterData\";\r\nimport ArrowDropDownRoundedIcon from \"@material-ui/icons/ArrowDropDownRounded\";\r\nimport {\r\n  AllMediaType,\r\n  CombineCreditsCrewType,\r\n  CombinedCreditsCastType,\r\n} from \"../../Types/Types\";\r\nimport MovieInfoToolTip from \"../../components/Common/movieInfoToolTip\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n\r\ntype PropsTypes = {\r\n  combineCrew: Array<CombineCreditsCrewType>;\r\n  combineCast: Array<CombinedCreditsCastType>;\r\n};\r\n\r\nconst StaffKnowFor: React.FC<PropsTypes> = ({ combineCrew, combineCast }) => {\r\n  const [showTip, setShowTip] = useState(\"0\");\r\n  const [selectWriting, setSelectWriting] = useState(false);\r\n  const [selectProd, setSelectProd] = useState(false);\r\n  const [selectActing, setSelectActing] = useState(false);\r\n  const [selectDirecting, setSelectDirecting] = useState(false);\r\n  const [clearAll, setClearAll] = useState(false);\r\n  const [movies, setMovies] = useState<any>([]);\r\n  const [tv, setTv] = useState<any>([]);\r\n  const [showMovieTv, setShowMovieTv] = useState(false);\r\n  const [showDep,setShowDep]=useState(true);\r\n  const [showMovTv,setShowMovTv]=useState(false);\r\n\r\n  const moviesCrew = [] as Array<AllMediaType>;\r\n  const tvShow = [] as Array<AllMediaType>;\r\n  const directing = [] as Array<AllMediaType>;\r\n  const production = [] as Array<AllMediaType>;\r\n  const writing = [] as Array<AllMediaType>;\r\n  const acting = [] as Array<AllMediaType>;\r\n\r\n  filterData(combineCast, acting, \"movie\");\r\n  filterData(combineCrew, moviesCrew, \"movie\");\r\n  filterData(combineCast, tvShow, \"tv\");\r\n  filterData(combineCrew, tvShow, \"tv\");\r\n\r\n  filterDepartament(combineCrew, directing, \"Directing\");\r\n  filterDepartament(combineCrew, production, \"Production\");\r\n  filterDepartament(combineCrew, writing, \"Writing\");\r\n\r\n  const allMedia = [\r\n    ...writing,\r\n    ...directing,\r\n    ...production,\r\n    ...acting,\r\n  ] as Array<AllMediaType>;\r\n\r\n  const nrOfMovies = allMedia.filter(\r\n    (item: any) => item.media_type === \"movie\"\r\n  );\r\n  const nrOfTv = allMedia.filter((item: any) => item.media_type === \"tv\");\r\n\r\n  const showToolTip = (id: string) => {\r\n    setShowTip(id);\r\n  };\r\n\r\n  const hideToolTip = (id: string) => {\r\n    setShowTip((id = \"\"));\r\n  };\r\n\r\n  const showWriting = (e: any) => {\r\n    e.preventDefault();\r\n    setSelectWriting(false);\r\n    setSelectProd(true);\r\n    setSelectActing(true);\r\n    setSelectDirecting(true);\r\n    setClearAll(true);\r\n    setShowDep(true);\r\n  };\r\n  const showProd = (e: any) => {\r\n    e.preventDefault();\r\n    setSelectWriting(true);\r\n    setSelectProd(false);\r\n    setSelectActing(true);\r\n    setSelectDirecting(true);\r\n    setClearAll(true);\r\n    setShowDep(true);\r\n  };\r\n  const showActing = (e: any) => {\r\n    e.preventDefault();\r\n    setSelectWriting(true);\r\n    setSelectProd(true);\r\n    setSelectActing(false);\r\n    setSelectDirecting(true);\r\n    setClearAll(true);\r\n    setShowDep(true);\r\n  };\r\n  const showDirecting = (e: any) => {\r\n    e.preventDefault();\r\n    setSelectWriting(true);\r\n    setSelectProd(true);\r\n    setSelectActing(true);\r\n    setSelectDirecting(false);\r\n    setClearAll(true);\r\n    setShowDep(true);\r\n  };\r\n\r\n  const clearAllFilter = () => {\r\n    setSelectWriting(false);\r\n    setSelectProd(false);\r\n    setSelectActing(false);\r\n    setSelectDirecting(false);\r\n    setClearAll(false);\r\n    setShowDep(true);\r\n    setShowMovTv(false)\r\n  };\r\n\r\n  const showMovies = (e: any) => {\r\n    e.preventDefault();\r\n    setShowMovieTv(true);\r\n    setShowDep(false);\r\n    setShowMovTv(true);\r\n    setClearAll(true);\r\n    setMovies(\r\n      allMedia.filter((movie: any) => {\r\n        if (movie.media_type === \"movie\") {\r\n          return movie;\r\n        }\r\n      })\r\n    );\r\n  };\r\n\r\n  const showTvShows = (e: any) => {\r\n    e.preventDefault();\r\n    setShowMovieTv(false);\r\n    setShowDep(false);\r\n    setShowMovTv(true);\r\n    setClearAll(true);\r\n    setTv(\r\n      allMedia.filter((tv: any) => {\r\n        if (tv.media_type === \"tv\") {\r\n          return tv;\r\n        }\r\n      })\r\n    );\r\n  };\r\n  //  console.log(\"D\", directing);\r\n  // console.log(\"P\", production);\r\n  //  console.log(\"A\", acting);\r\n  //  console.log(\"W\", writing);\r\n  return (\r\n    <div className=\"carierwrapp\">\r\n      <div className=\"carierwrapp__header\">\r\n        <ul className=\"menuWrapp__list menuWrapp__list--carier\">\r\n          <li className=\"menuWrapp__item menuWrapp__item--carier\">\r\n            {clearAll ? (\r\n              <button className=\"btn btn--clearall\" onClick={clearAllFilter}>\r\n                Clear\r\n              </button>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n          </li>\r\n          <li className=\"menuWrapp__item menuWrapp__item--carier\">\r\n            <span>\r\n              All <ArrowDropDownRoundedIcon />\r\n            </span>\r\n            <div className=\"menuWrapp__drop\">\r\n              <a href=\"#\" className=\"menuWrapp__drop-link\" onClick={showMovies}>\r\n                {allMedia.slice(0, 1).map((m: any) => (\r\n                  <span key={m.credit_id}>\r\n                    {m.media_type === \"movie\" ? \"Movies\" : \"Movies\"}{\" \"}\r\n                    {nrOfMovies.length}\r\n                  </span>\r\n                ))}\r\n              </a>\r\n              <a\r\n                href=\"#\"\r\n                className=\"menuWrapp__drop-link\"\r\n                onClick={showTvShows}\r\n              >\r\n                {tvShow.slice(0, 1).map((m) => (\r\n                  <span key={m.credit_id}>\r\n                    {`${m.media_type} Shows`} {nrOfTv.length}\r\n                  </span>\r\n                ))}\r\n              </a>\r\n            </div>\r\n          </li>\r\n          <li className=\"menuWrapp__item menuWrapp__item--carier\">\r\n            <span>\r\n              Departament <ArrowDropDownRoundedIcon />\r\n            </span>\r\n            <div className=\"menuWrapp__drop\">\r\n              <a\r\n                href=\"#\"\r\n                className=\"menuWrapp__drop-link\"\r\n                onClick={showDirecting}\r\n              >\r\n                {directing.slice(0, 1).map((d) => d.department)}{\" \"}\r\n                {directing.length}\r\n              </a>\r\n              <a href=\"#\" className=\"menuWrapp__drop-link\" onClick={showProd}>\r\n                {production.slice(0, 1).map((p) => p.department)}{\" \"}\r\n                {production.length}\r\n              </a>\r\n              <a\r\n                href=\"#\"\r\n                className=\"menuWrapp__drop-link\"\r\n                onClick={showWriting}\r\n              >\r\n                {writing.length === 0\r\n                  ? \"Writing\"\r\n                  : writing.slice(0, 1).map((p) => p.department)}{\" \"}\r\n                {writing.length}\r\n              </a>\r\n              <a href=\"#\" className=\"menuWrapp__drop-link\" onClick={showActing}>\r\n                {acting\r\n                  .slice(0, 1)\r\n                  .map((p) =>\r\n                    p.character === \"Himself\" ? \"Acting\" : \"Acting\"\r\n                  )}{\" \"}\r\n                {acting.length === 0 ? \"\" : acting.length}\r\n              </a>\r\n            </div>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n      <div className=\"carierwrapp__body\">\r\n       <div style={showMovTv?{display:'table',width:'100%'}:{display:'none'}}>\r\n        {showMovieTv ? (\r\n          <TableContainer component={Paper}>\r\n            <Table\r\n              size=\"medium\"\r\n              aria-label=\"a dense table\"\r\n            >\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell className=\"tableheadcell\">\r\n                    <h3>Directing</h3>\r\n                  </TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {movies\r\n                  .filter((item: any) => item.department === \"Directing\")\r\n                  .map((movie: any) => (\r\n                    <TableRow key={movie.credit_id}>\r\n                      <TableCell component=\"th\" scope=\"row\">\r\n                        <div className=\"movieinfo\">\r\n                          <span>\r\n                            {movie.release_date === undefined\r\n                              ? \"\"\r\n                              : movie.release_date.slice(0, 4)}\r\n                            {movie.first_air_date\r\n                              ? movie.first_air_date.slice(0, 4)\r\n                              : \"\"}\r\n                          </span>{\" \"}\r\n                          <span\r\n                            className=\"movieinfo__dot\"\r\n                            onClick={() => showToolTip(movie.credit_id)}\r\n                            id={`${movie.id}`}\r\n                          ></span>{\" \"}\r\n                          {movie.title ? movie.title : movie.name}\r\n                          <span className=\"movieinfo__job\">{`... as ${movie.job}`}</span>\r\n                          <MovieInfoToolTip\r\n                            poster={movie.poster_path}\r\n                            desc={movie.overview}\r\n                            title={movie.title}\r\n                            name={movie.name}\r\n                            showTip={showTip}\r\n                            id={movie.credit_id}\r\n                            hideTooltip={() => hideToolTip(movie.credit_id)}\r\n                          />\r\n                        </div>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n              </TableBody>\r\n            </Table>\r\n            <Table\r\n              size=\"medium\"\r\n              aria-label=\"a dense table\"\r\n            >\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell className=\"tableheadcell\">\r\n                    <h3>Writing</h3>\r\n                  </TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {movies\r\n                  .filter((item: any) => item.department === \"Writing\")\r\n                  .map((movie: any) => (\r\n                    <TableRow key={movie.credit_id}>\r\n                      <TableCell component=\"th\" scope=\"row\">\r\n                        <div className=\"movieinfo\">\r\n                          <span>\r\n                            {movie.release_date === undefined\r\n                              ? \"\"\r\n                              : movie.release_date.slice(0, 4)}\r\n                            {movie.first_air_date\r\n                              ? movie.first_air_date.slice(0, 4)\r\n                              : \"\"}\r\n                          </span>{\" \"}\r\n                          <span\r\n                            className=\"movieinfo__dot\"\r\n                            onClick={() => showToolTip(movie.credit_id)}\r\n                            id={`${movie.id}`}\r\n                          ></span>{\" \"}\r\n                          {movie.title ? movie.title : movie.name}\r\n                          <span className=\"movieinfo__job\">{`... as ${movie.job}`}</span>\r\n                          <MovieInfoToolTip\r\n                            poster={movie.poster_path}\r\n                            desc={movie.overview}\r\n                            title={movie.title}\r\n                            name={movie.name}\r\n                            showTip={showTip}\r\n                            id={movie.credit_id}\r\n                            hideTooltip={() => hideToolTip(movie.credit_id)}\r\n                          />\r\n                        </div>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n              </TableBody>\r\n            </Table>\r\n            <Table\r\n              size=\"medium\"\r\n              aria-label=\"a dense table\"\r\n            >\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell className=\"tableheadcell\">\r\n                    <h3>Production</h3>\r\n                  </TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {movies\r\n                  .filter((item: any) => item.department === \"Production\")\r\n                  .map((movie: any) => (\r\n                    <TableRow key={movie.credit_id}>\r\n                      <TableCell component=\"th\" scope=\"row\">\r\n                        <div className=\"movieinfo\">\r\n                          <span>\r\n                            {movie.release_date === undefined\r\n                              ? \"\"\r\n                              : movie.release_date.slice(0, 4)}\r\n                            {movie.first_air_date\r\n                              ? movie.first_air_date.slice(0, 4)\r\n                              : \"\"}\r\n                          </span>{\" \"}\r\n                          <span\r\n                            className=\"movieinfo__dot\"\r\n                            onClick={() => showToolTip(movie.credit_id)}\r\n                            id={`${movie.id}`}\r\n                          ></span>{\" \"}\r\n                          {movie.title ? movie.title : movie.name}\r\n                          <span className=\"movieinfo__job\">{`... as ${movie.job}`}</span>\r\n                          <MovieInfoToolTip\r\n                            poster={movie.poster_path}\r\n                            desc={movie.overview}\r\n                            title={movie.title}\r\n                            name={movie.name}\r\n                            showTip={showTip}\r\n                            id={movie.credit_id}\r\n                            hideTooltip={() => hideToolTip(movie.credit_id)}\r\n                          />\r\n                        </div>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n              </TableBody>\r\n            </Table>\r\n            <Table\r\n              size=\"medium\"\r\n              aria-label=\"a dense table\"\r\n            >\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell className=\"tableheadcell\">\r\n                    <h3>Acting</h3>\r\n                  </TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {movies\r\n                  .filter((item: any) => item.department === \"Production\")\r\n                  .map((movie: any) => (\r\n                    <TableRow key={movie.credit_id}>\r\n                      <TableCell component=\"th\" scope=\"row\">\r\n                        <div className=\"movieinfo\">\r\n                          <span>\r\n                            {movie.release_date === undefined\r\n                              ? \"\"\r\n                              : movie.release_date.slice(0, 4)}\r\n                            {movie.first_air_date\r\n                              ? movie.first_air_date.slice(0, 4)\r\n                              : \"\"}\r\n                          </span>{\" \"}\r\n                          <span\r\n                            className=\"movieinfo__dot\"\r\n                            onClick={() => showToolTip(movie.credit_id)}\r\n                            id={`${movie.id}`}\r\n                          ></span>{\" \"}\r\n                          {movie.title ? movie.title : movie.name}\r\n                          <span className=\"movieinfo__job\">{`... as ${movie.job}`}</span>\r\n                          <MovieInfoToolTip\r\n                            poster={movie.poster_path}\r\n                            desc={movie.overview}\r\n                            title={movie.title}\r\n                            name={movie.name}\r\n                            showTip={showTip}\r\n                            id={movie.credit_id}\r\n                            hideTooltip={() => hideToolTip(movie.credit_id)}\r\n                          />\r\n                        </div>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n        ) : (\r\n          <TableContainer component={Paper}>\r\n            <Table\r\n              size=\"medium\"\r\n              aria-label=\"a dense table\"\r\n            >\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell className=\"tableheadcell\">\r\n                    <h3>Directing</h3>\r\n                  </TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {tv\r\n                  .filter((item: any) => item.department === \"Directing\")\r\n                  .map((movie: any) => (\r\n                    <TableRow key={movie.credit_id}>\r\n                      <TableCell component=\"th\" scope=\"row\">\r\n                        <div className=\"movieinfo\">\r\n                          <span>\r\n                            {movie.release_date === undefined\r\n                              ? \"\"\r\n                              : movie.release_date.slice(0, 4)}\r\n                            {movie.first_air_date\r\n                              ? movie.first_air_date.slice(0, 4)\r\n                              : \"\"}\r\n                          </span>{\" \"}\r\n                          <span\r\n                            className=\"movieinfo__dot\"\r\n                            onClick={() => showToolTip(movie.credit_id)}\r\n                            id={`${movie.id}`}\r\n                          ></span>{\" \"}\r\n                          {movie.title ? movie.title : movie.name}\r\n                          <span className=\"movieinfo__job\">{movie.episode_count>1?`(${movie.episode_count} episodes)`:`(${movie.episode_count} episode)`}{`... as ${movie.job}`}</span>\r\n                          <MovieInfoToolTip\r\n                            poster={movie.poster_path}\r\n                            desc={movie.overview}\r\n                            title={movie.title}\r\n                            name={movie.name}\r\n                            showTip={showTip}\r\n                            id={movie.credit_id}\r\n                            hideTooltip={() => hideToolTip(movie.credit_id)}\r\n                          />\r\n                        </div>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n              </TableBody>\r\n            </Table>\r\n            <Table\r\n              size=\"medium\"\r\n              aria-label=\"a dense table\"\r\n            >\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell className=\"tableheadcell\">\r\n                    <h3>Writing</h3>\r\n                  </TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {tv\r\n                  .filter((item: any) => item.department === \"Writing\")\r\n                  .map((movie: any) => (\r\n                    <TableRow key={movie.credit_id}>\r\n                      <TableCell component=\"th\" scope=\"row\">\r\n                        <div className=\"movieinfo\">\r\n                          <span>\r\n                            {movie.release_date === undefined\r\n                              ? \"\"\r\n                              : movie.release_date.slice(0, 4)}\r\n                            {movie.first_air_date\r\n                              ? movie.first_air_date.slice(0, 4)\r\n                              : \"\"}\r\n                          </span>{\" \"}\r\n                          <span\r\n                            className=\"movieinfo__dot\"\r\n                            onClick={() => showToolTip(movie.credit_id)}\r\n                            id={`${movie.id}`}\r\n                          ></span>{\" \"}\r\n                          {movie.title ? movie.title : movie.name}\r\n                          <span className=\"movieinfo__job\">{movie.episode_count>1?`(${movie.episode_count} episodes)`:`(${movie.episode_count} episode)`}{`... as ${movie.job}`}</span>\r\n                          <MovieInfoToolTip\r\n                            poster={movie.poster_path}\r\n                            desc={movie.overview}\r\n                            title={movie.title}\r\n                            name={movie.name}\r\n                            showTip={showTip}\r\n                            id={movie.credit_id}\r\n                            hideTooltip={() => hideToolTip(movie.credit_id)}\r\n                          />\r\n                        </div>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n              </TableBody>\r\n            </Table>\r\n            <Table\r\n              size=\"medium\"\r\n              aria-label=\"a dense table\"\r\n            >\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell className=\"tableheadcell\">\r\n                    <h3>Production</h3>\r\n                  </TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {tv\r\n                  .filter((item: any) => item.department === \"Production\")\r\n                  .map((movie: any) => (\r\n                    <TableRow key={movie.credit_id}>\r\n                      <TableCell component=\"th\" scope=\"row\">\r\n                        <div className=\"movieinfo\">\r\n                          <span>\r\n                            {movie.release_date === undefined\r\n                              ? \"\"\r\n                              : movie.release_date.slice(0, 4)}\r\n                            {movie.first_air_date\r\n                              ? movie.first_air_date.slice(0, 4)\r\n                              : \"\"}\r\n                          </span>{\" \"}\r\n                          <span\r\n                            className=\"movieinfo__dot\"\r\n                            onClick={() => showToolTip(movie.credit_id)}\r\n                            id={`${movie.id}`}\r\n                          ></span>{\" \"}\r\n                          {movie.title ? movie.title : movie.name}\r\n                            <span className=\"movieinfo__job\">{movie.episode_count>1?`(${movie.episode_count} episodes)`:`(${movie.episode_count} episode)`}{`... as ${movie.job}`}</span>\r\n                          <MovieInfoToolTip\r\n                            poster={movie.poster_path}\r\n                            desc={movie.overview}\r\n                            title={movie.title}\r\n                            name={movie.name}\r\n                            showTip={showTip}\r\n                            id={movie.credit_id}\r\n                            hideTooltip={() => hideToolTip(movie.credit_id)}\r\n                          />\r\n                        </div>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n              </TableBody>\r\n            </Table>\r\n            <Table\r\n              size=\"medium\"\r\n              aria-label=\"a dense table\"\r\n              style={selectWriting ? { display: \"none\" } : { display: \"table\" }}\r\n            >\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell className=\"tableheadcell\">\r\n                    <h3>Acting</h3>\r\n                  </TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {tv\r\n                  .filter((item: any) => item.department === \"Production\")\r\n                  .map((movie: any) => (\r\n                    <TableRow key={movie.credit_id}>\r\n                      <TableCell component=\"th\" scope=\"row\">\r\n                        <div className=\"movieinfo\">\r\n                          <span>\r\n                            {movie.release_date === undefined\r\n                              ? \"\"\r\n                              : movie.release_date.slice(0, 4)}\r\n                            {movie.first_air_date\r\n                              ? movie.first_air_date.slice(0, 4)\r\n                              : \"\"}\r\n                          </span>{\" \"}\r\n                          <span\r\n                            className=\"movieinfo__dot\"\r\n                            onClick={() => showToolTip(movie.credit_id)}\r\n                            id={`${movie.id}`}\r\n                          ></span>{\" \"}\r\n                          {movie.title ? movie.title : movie.name}\r\n                          <span className=\"movieinfo__job\">{movie.episode_count>1?`(${movie.episode_count} episodes)`:`(${movie.episode_count} episode)`}{`... as ${movie.job}`}</span>\r\n                          <MovieInfoToolTip\r\n                            poster={movie.poster_path}\r\n                            desc={movie.overview}\r\n                            title={movie.title}\r\n                            name={movie.name}\r\n                            showTip={showTip}\r\n                            id={movie.credit_id}\r\n                            hideTooltip={() => hideToolTip(movie.credit_id)}\r\n                          />\r\n                        </div>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n        )}\r\n        </div>\r\n        {showDep?\r\n        <TableContainer component={Paper}>\r\n         <Table\r\n            size=\"medium\"\r\n            aria-label=\"a dense table\"\r\n            style={selectWriting ? { display: \"none\" } : { display: \"table\" }}\r\n          >\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell className=\"tableheadcell\">\r\n                  <h3>Writing</h3>\r\n                </TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {writing.map((movie) => (\r\n                <TableRow key={movie.credit_id}>\r\n                  <TableCell component=\"th\" scope=\"row\">\r\n                    <div className=\"movieinfo\">\r\n                      <span>\r\n                        {movie.release_date === undefined\r\n                          ? \"\"\r\n                          : movie.release_date.slice(0, 4)}\r\n                        {movie.first_air_date\r\n                          ? movie.first_air_date.slice(0, 4)\r\n                          : \"\"}\r\n                      </span>{\" \"}\r\n                      <span\r\n                        className=\"movieinfo__dot\"\r\n                        onClick={() => showToolTip(movie.credit_id)}\r\n                        id={`${movie.id}`}\r\n                      ></span>{\" \"}\r\n                      {movie.title ? movie.title : movie.name}\r\n                      <span className=\"movieinfo__job\">{`... as ${movie.job}`}</span>\r\n                      <MovieInfoToolTip\r\n                        poster={movie.poster_path}\r\n                        desc={movie.overview}\r\n                        title={movie.title}\r\n                        name={movie.name}\r\n                        showTip={showTip}\r\n                        id={movie.credit_id}\r\n                        hideTooltip={() => hideToolTip(movie.credit_id)}\r\n                      />\r\n                    </div>\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n          <Table\r\n            size=\"medium\"\r\n            aria-label=\"a dense table\"\r\n            style={selectDirecting ? { display: \"none\" } : { display: \"table\" }}\r\n          >\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell className=\"tableheadcell\">\r\n                  <h3>Directing</h3>\r\n                </TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {directing.map((movie) => (\r\n                <TableRow key={movie.credit_id}>\r\n                  <TableCell component=\"th\" scope=\"row\">\r\n                    <div className=\"movieinfo\">\r\n                      <span>\r\n                        {movie.release_date === undefined\r\n                          ? \"\"\r\n                          : movie.release_date.slice(0, 4)}\r\n                        {movie.first_air_date\r\n                          ? movie.first_air_date.slice(0, 4)\r\n                          : \"\"}\r\n                      </span>{\" \"}\r\n                      <span\r\n                        className=\"movieinfo__dot\"\r\n                        onClick={() => showToolTip(movie.credit_id)}\r\n                        id={`${movie.id}`}\r\n                      ></span>{\" \"}\r\n                      {movie.title ? movie.title : movie.name}\r\n                      <span className=\"movieinfo__job\">{`... as ${movie.job}`}</span>\r\n                      <MovieInfoToolTip\r\n                        poster={movie.poster_path}\r\n                        desc={movie.overview}\r\n                        title={movie.title}\r\n                        name={movie.name}\r\n                        showTip={showTip}\r\n                        id={movie.credit_id}\r\n                        hideTooltip={() => hideToolTip(movie.credit_id)}\r\n                      />\r\n                    </div>\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n          <Table\r\n            size=\"medium\"\r\n            aria-label=\"a dense table\"\r\n            style={selectProd ? { display: \"none\" } : { display: \"table\" }}\r\n          >\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell className=\"tableheadcell\">\r\n                  <h3>Production</h3>\r\n                </TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {production.map((movie) => (\r\n                <TableRow key={movie.credit_id}>\r\n                  <TableCell component=\"th\" scope=\"row\">\r\n                    <div className=\"movieinfo\">\r\n                      <span>\r\n                        {movie.release_date === undefined\r\n                          ? movie.release_date\r\n                          : \"---\"\r\n                          ? movie.release_date.slice(0, 4)\r\n                          : \"\"}\r\n                        {movie.first_air_date\r\n                          ? movie.first_air_date.slice(0, 4)\r\n                          : \"\"}\r\n                      </span>{\" \"}\r\n                      <span\r\n                        className=\"movieinfo__dot\"\r\n                        onClick={() => showToolTip(movie.credit_id)}\r\n                        id={`${movie.id}`}\r\n                      ></span>{\" \"}\r\n                      {movie.title ? movie.title : movie.name}\r\n                      <span className=\"movieinfo__job\">{`... as ${movie.job}`}</span>\r\n                      <MovieInfoToolTip\r\n                        poster={movie.poster_path}\r\n                        desc={movie.overview}\r\n                        title={movie.title}\r\n                        name={movie.name}\r\n                        showTip={showTip}\r\n                        id={movie.credit_id}\r\n                        hideTooltip={() => hideToolTip(movie.credit_id)}\r\n                      />\r\n                    </div>\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n          <Table\r\n            size=\"medium\"\r\n            aria-label=\"a dense table\"\r\n            style={selectActing ? { display: \"none\" } : { display: \"table\" }}\r\n          >{}\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell className=\"tableheadcell\">\r\n                  <h3>Acting</h3>\r\n                </TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {acting.map((movie) => (\r\n                <TableRow key={movie.credit_id}>\r\n                  <TableCell component=\"th\" scope=\"row\">\r\n                    <div className=\"movieinfo\">\r\n                      <span>\r\n                        {movie.release_date === undefined\r\n                          ? \"---\"\r\n                          : movie.release_date.slice(0, 4)}\r\n                        {movie.first_air_date\r\n                          ? movie.first_air_date.slice(0, 4)\r\n                          : \"\"}\r\n                      </span>{\" \"}\r\n                      <span\r\n                        className=\"movieinfo__dot\"\r\n                        onClick={() => showToolTip(movie.credit_id)}\r\n                        id={`${movie.id}`}\r\n                      ></span>{\" \"}\r\n                      {movie.title ? movie.title : movie.name}\r\n                      <span className=\"movieinfo__job\">{`... as ${\r\n                        movie.character ? movie.character : \"Unknown\"\r\n                      }`}</span>\r\n                      <MovieInfoToolTip\r\n                        poster={movie.poster_path}\r\n                        desc={movie.overview}\r\n                        title={movie.title}\r\n                        name={movie.name}\r\n                        showTip={showTip}\r\n                        id={movie.credit_id}\r\n                        hideTooltip={() => hideToolTip(movie.credit_id)}\r\n                      />\r\n                    </div>\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>:''}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StaffKnowFor;\r\n","F:\\REACT\\movie-app\\src\\TvCard\\PosterTv\\CardPosterTv.tsx",["609","610","611","612","613","614","615","616"],"import React from \"react\";\r\n\r\nimport FormatListBulletedRoundedIcon from \"@material-ui/icons/FormatListBulletedRounded\";\r\nimport BookmarkRoundedIcon from \"@material-ui/icons/BookmarkRounded\";\r\nimport FavoriteRoundedIcon from \"@material-ui/icons/FavoriteRounded\";\r\nimport StarRoundedIcon from \"@material-ui/icons/StarRounded\";\r\nimport PlayArrowRoundedIcon from \"@material-ui/icons/PlayArrowRounded\";\r\nimport { buildStyles, CircularProgressbar } from \"react-circular-progressbar\";\r\nimport \"react-circular-progressbar/dist/styles.css\";\r\nimport { CreditsType, GenresType, TvDetailType } from \"../../Types/Types\";\r\nimport { crewStaff, crewStaffTV } from \"../../components/Helper/crewstaff\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n  details: null | TvDetailType;\r\n  original_title: string | undefined;\r\n  release_date: undefined | string;\r\n  original_language: undefined | string;\r\n  genres: undefined | Array<GenresType>;\r\n  runtime: undefined | Array<number>;\r\n  popularity: undefined | number;\r\n  overview: undefined | string;\r\n  credits: CreditsType | null;\r\n  handaleplay: () => void;\r\n};\r\n\r\nconst CardPoster = (props: PropsType) => {\r\n  const creator = props.details?.created_by.map((c) => c.name).toLocaleString();\r\n  const id = props.details?.created_by.map((id) => id.id);\r\n\r\n  const crew: any = [];\r\n\r\n  const voteAvarage = props.details?.vote_average\r\n    ? props.details.vote_average\r\n    : \"\";\r\n\r\n  let votes = voteAvarage.toLocaleString().replace(\".\", \"\");\r\n  if (votes.length < 2) {\r\n    votes = votes + \"0\";\r\n  }\r\n  const voteNumber = parseInt(votes);\r\n\r\n  const trailColorLine = (value: number) => {\r\n    if (value < 30) {\r\n      return \"#fd1818\";\r\n    } else if (value > 30 && value < 70) {\r\n      return \"#ffff5d\";\r\n    } else {\r\n      return \"#50ff50de\";\r\n    }\r\n  };\r\n\r\n  // if (props.credits?.crew) {\r\n  //   crewStaffTV(props.credits?.crew, \"Directing\", crew);\r\n  // }\r\n\r\n  return (\r\n    <div\r\n      className=\"posterWrapp\"\r\n      style={{\r\n        background: `linear-gradient(to left, #7f7f7f9e, black), url(https://image.tmdb.org/t/p/w500/${props.details?.poster_path}) no-repeat`,\r\n      }}\r\n    >\r\n      <div className=\"posterWrapp__img\">\r\n        <img\r\n          src={`https://image.tmdb.org/t/p/w500/${props.details?.poster_path}`}\r\n          alt=\"poster\"\r\n        />\r\n      </div>\r\n      <div className=\"posterWrapp__info\">\r\n        <div className=\"posterWrapp__info-heading\">\r\n          <h2>\r\n            {props.original_title}{\" \"}\r\n            <span>({props.release_date?.slice(0, 4)})</span>{\" \"}\r\n          </h2>\r\n          <p>\r\n            {props.release_date?.replaceAll(\"-\", \"/\")} (\r\n            {props.original_language?.toUpperCase()}){\" \"}\r\n            {props.genres?.map((g) => (\r\n              <span key={g.id}>{g.name}</span>\r\n            ))}{\" \"}\r\n            - {props.runtime ? `${props.runtime[0]} min` : \"\"}\r\n          </p>\r\n        </div>\r\n        <div className=\"posterWrapp__info-actions\">\r\n          <ul className=\"posterWrapp__info-actions-list\">\r\n            <li className=\"posterWrapp__info-actions-item\">\r\n              <a\r\n                href=\"#\"\r\n                className=\"posterWrapp__info-actions-link posterWrapp__info-actions-link--score\"\r\n              >\r\n                <div>\r\n                  <CircularProgressbar\r\n                    value={voteNumber}\r\n                    text={`${voteNumber}%`}\r\n                    styles={buildStyles({\r\n                      //trail: { stroke: \"#fff\" },\r\n                      textColor: \"#fff\",\r\n                      textSize: \"3rem\",\r\n                      backgroundColor: \"#000\",\r\n                      trailColor: \"#3d543fba\",\r\n                      pathColor: trailColorLine(voteNumber),\r\n                    })}\r\n                  />\r\n                </div>\r\n                User Score\r\n              </a>\r\n            </li>\r\n            <li className=\"posterWrapp__info-actions-item\">\r\n              <a\r\n                href=\"#\"\r\n                className=\"posterWrapp__info-actions-link posterWrapp__info-actions-link--styled\"\r\n              >\r\n                <FormatListBulletedRoundedIcon />\r\n              </a>\r\n              <div className=\"movieCrad__tolltip\">\r\n                Login to create and edit custom lists\r\n              </div>\r\n            </li>\r\n            <li className=\"posterWrapp__info-actions-item\">\r\n              <a\r\n                href=\"#\"\r\n                className=\"posterWrapp__info-actions-link posterWrapp__info-actions-link--styled\"\r\n              >\r\n                <FavoriteRoundedIcon />\r\n              </a>\r\n              <div className=\"movieCrad__tolltip\">\r\n                Login to add this movie to your favourite list\r\n              </div>\r\n            </li>\r\n            <li className=\"posterWrapp__info-actions-item\">\r\n              <a\r\n                href=\"#\"\r\n                className=\"posterWrapp__info-actions-link posterWrapp__info-actions-link--styled\"\r\n              >\r\n                <BookmarkRoundedIcon />\r\n              </a>\r\n              <div className=\"movieCrad__tolltip\">\r\n                Login to add this movie to your watchlist\r\n              </div>\r\n            </li>\r\n            <li className=\"posterWrapp__info-actions-item\">\r\n              <a\r\n                href=\"#\"\r\n                className=\"posterWrapp__info-actions-link posterWrapp__info-actions-link--styled\"\r\n              >\r\n                <StarRoundedIcon />\r\n              </a>\r\n              <p className=\"movieCrad__tolltip\">Login to rate this movie</p>\r\n            </li>\r\n            <li className=\"posterWrapp__info-actions-item\">\r\n              <button\r\n                className=\"btn btn--postertrailer\"\r\n                onClick={props.handaleplay}\r\n              >\r\n                <PlayArrowRoundedIcon /> Play Trailer\r\n              </button>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n        <div className=\"posterWrapp__info-overview\">\r\n          <p>{props.overview}</p>\r\n        </div>\r\n        <div className=\"posterWrapp__info-cast\">\r\n          <ul className=\"posterWrapp__info-cast-list\">\r\n            <li className=\"posterWrapp__info-cast-item\">\r\n              <Link\r\n                to={`/posterstaff/${id}`}\r\n                className=\"posterWrapp__info-cast-link\"\r\n              >\r\n                <p>{creator}</p>\r\n                <p>Creator</p>\r\n              </Link>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardPoster;\r\n","F:\\REACT\\movie-app\\src\\TvCard\\CurrentSeason\\CurrentSeason.tsx",["617"],"import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { tvDetailsSelector } from \"../../components/Store/Selectors/Tvselector\";\r\nimport { AppStateType } from \"../../components/Store/store\";\r\n\r\ntype SeasonType = {\r\n  air_date: \"2019-11-12\";\r\n  episode_count: number;\r\n  id: number;\r\n  name: string;\r\n  overview: string;\r\n  poster_path: string;\r\n  season_number: number;\r\n};\r\n\r\nconst CurrentSeason = () => {\r\n  const tvDetail = useSelector((state: AppStateType) =>\r\n    tvDetailsSelector(state)\r\n  );\r\n\r\n  const lastSeazonPoster = tvDetail?.seasons.find(\r\n    (item, index) => index === tvDetail.seasons.length - 1\r\n  );\r\n\r\n  return (\r\n    <div className=\"socialWrapp\">\r\n      <div className=\"socialWrapp__header\">\r\n        <h3 className=\"socialWrapp__header-heading\">Current Season</h3>\r\n      </div>\r\n      <div className=\"socialWrapp__reviews socialWrapp__reviews--tv\">\r\n        <div className=\"socialWrapp__reviews--tv-img\">\r\n          <img\r\n            src={`https://image.tmdb.org/t/p/w500/${lastSeazonPoster?.poster_path}`}\r\n            alt=\"poster\"\r\n          />\r\n        </div>\r\n        <div className=\"socialWrapp__reviews--tv-overview\">\r\n          <div className=\"socialWrapp__reviews--tv-overview-heading\">\r\n            <p>Season {lastSeazonPoster?.season_number}</p>\r\n            <p>\r\n              {lastSeazonPoster?.air_date} | {lastSeazonPoster?.episode_count}{\" \"}\r\n              Episodes\r\n            </p>\r\n          </div>\r\n          <p>{lastSeazonPoster?.overview}</p>\r\n        </div>\r\n      </div>\r\n      <h4>\r\n        <Link to=\"/allreview/\">View All Seasons</Link>\r\n      </h4>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CurrentSeason;\r\n","F:\\REACT\\movie-app\\src\\components\\Common\\SearchSlide.tsx",["618"],{"ruleId":"619","severity":1,"message":"620","line":5,"column":8,"nodeType":"621","messageId":"622","endLine":5,"endColumn":18},{"ruleId":"623","severity":1,"message":"624","line":24,"column":6,"nodeType":"625","endLine":24,"endColumn":8,"suggestions":"626"},{"ruleId":"619","severity":1,"message":"627","line":1,"column":17,"nodeType":"621","messageId":"622","endLine":1,"endColumn":25},{"ruleId":"619","severity":1,"message":"628","line":2,"column":23,"nodeType":"621","messageId":"622","endLine":2,"endColumn":34},{"ruleId":"619","severity":1,"message":"629","line":4,"column":10,"nodeType":"621","messageId":"622","endLine":4,"endColumn":26},{"ruleId":"619","severity":1,"message":"630","line":5,"column":10,"nodeType":"621","messageId":"622","endLine":5,"endColumn":22},{"ruleId":"631","severity":1,"message":"632","line":83,"column":15,"nodeType":"633","endLine":83,"endColumn":50},{"ruleId":"631","severity":1,"message":"632","line":88,"column":15,"nodeType":"633","endLine":88,"endColumn":50},{"ruleId":"631","severity":1,"message":"632","line":93,"column":15,"nodeType":"633","endLine":93,"endColumn":50},{"ruleId":"634","severity":1,"message":"635","line":2,"column":37,"nodeType":"636","messageId":"637","endLine":2,"endColumn":39},{"ruleId":"634","severity":1,"message":"635","line":9,"column":54,"nodeType":"636","messageId":"637","endLine":9,"endColumn":56},{"ruleId":"634","severity":1,"message":"638","line":4,"column":28,"nodeType":"636","messageId":"637","endLine":4,"endColumn":30},{"ruleId":"634","severity":1,"message":"638","line":13,"column":28,"nodeType":"636","messageId":"637","endLine":13,"endColumn":30},{"ruleId":"639","severity":1,"message":"640","line":2,"column":54,"nodeType":"641","messageId":"642","endLine":2,"endColumn":56},{"ruleId":"623","severity":1,"message":"643","line":23,"column":6,"nodeType":"625","endLine":23,"endColumn":8,"suggestions":"644"},{"ruleId":"623","severity":1,"message":"643","line":22,"column":6,"nodeType":"625","endLine":22,"endColumn":8,"suggestions":"645"},{"ruleId":"619","severity":1,"message":"646","line":1,"column":17,"nodeType":"621","messageId":"622","endLine":1,"endColumn":26},{"ruleId":"619","severity":1,"message":"646","line":1,"column":16,"nodeType":"621","messageId":"622","endLine":1,"endColumn":25},{"ruleId":"634","severity":1,"message":"647","line":23,"column":34,"nodeType":"636","messageId":"637","endLine":23,"endColumn":36},{"ruleId":"619","severity":1,"message":"648","line":7,"column":3,"nodeType":"621","messageId":"622","endLine":7,"endColumn":14},{"ruleId":"619","severity":1,"message":"649","line":8,"column":3,"nodeType":"621","messageId":"622","endLine":8,"endColumn":12},{"ruleId":"619","severity":1,"message":"650","line":17,"column":8,"nodeType":"621","messageId":"622","endLine":17,"endColumn":17},{"ruleId":"619","severity":1,"message":"629","line":23,"column":3,"nodeType":"621","messageId":"622","endLine":23,"endColumn":19},{"ruleId":"619","severity":1,"message":"651","line":1,"column":17,"nodeType":"621","messageId":"622","endLine":1,"endColumn":19},{"ruleId":"619","severity":1,"message":"652","line":2,"column":10,"nodeType":"621","messageId":"622","endLine":2,"endColumn":34},{"ruleId":"619","severity":1,"message":"648","line":9,"column":10,"nodeType":"621","messageId":"622","endLine":9,"endColumn":21},{"ruleId":"619","severity":1,"message":"651","line":1,"column":17,"nodeType":"621","messageId":"622","endLine":1,"endColumn":19},{"ruleId":"619","severity":1,"message":"652","line":2,"column":10,"nodeType":"621","messageId":"622","endLine":2,"endColumn":34},{"ruleId":"619","severity":1,"message":"651","line":1,"column":17,"nodeType":"621","messageId":"622","endLine":1,"endColumn":19},{"ruleId":"619","severity":1,"message":"652","line":2,"column":10,"nodeType":"621","messageId":"622","endLine":2,"endColumn":34},{"ruleId":"619","severity":1,"message":"651","line":1,"column":17,"nodeType":"621","messageId":"622","endLine":1,"endColumn":19},{"ruleId":"619","severity":1,"message":"652","line":2,"column":10,"nodeType":"621","messageId":"622","endLine":2,"endColumn":34},{"ruleId":"619","severity":1,"message":"648","line":9,"column":10,"nodeType":"621","messageId":"622","endLine":9,"endColumn":21},{"ruleId":"623","severity":1,"message":"643","line":24,"column":6,"nodeType":"625","endLine":24,"endColumn":8,"suggestions":"653"},{"ruleId":"623","severity":1,"message":"643","line":23,"column":6,"nodeType":"625","endLine":23,"endColumn":8,"suggestions":"654"},{"ruleId":"623","severity":1,"message":"643","line":21,"column":6,"nodeType":"625","endLine":21,"endColumn":8,"suggestions":"655"},{"ruleId":"619","severity":1,"message":"656","line":3,"column":10,"nodeType":"621","messageId":"622","endLine":3,"endColumn":20},{"ruleId":"631","severity":1,"message":"632","line":41,"column":15,"nodeType":"633","endLine":41,"endColumn":59},{"ruleId":"634","severity":1,"message":"657","line":33,"column":38,"nodeType":"636","messageId":"658","endLine":33,"endColumn":40},{"ruleId":"631","severity":1,"message":"632","line":51,"column":13,"nodeType":"633","endLine":51,"endColumn":61},{"ruleId":"631","severity":1,"message":"632","line":56,"column":13,"nodeType":"633","endLine":56,"endColumn":61},{"ruleId":"631","severity":1,"message":"632","line":61,"column":13,"nodeType":"633","endLine":61,"endColumn":61},{"ruleId":"631","severity":1,"message":"632","line":53,"column":13,"nodeType":"633","endLine":53,"endColumn":62},{"ruleId":"634","severity":1,"message":"659","line":17,"column":32,"nodeType":"636","messageId":"658","endLine":17,"endColumn":34},{"ruleId":"619","severity":1,"message":"660","line":54,"column":9,"nodeType":"621","messageId":"622","endLine":54,"endColumn":16},{"ruleId":"631","severity":1,"message":"632","line":94,"column":15,"nodeType":"633","endLine":97,"endColumn":16},{"ruleId":"631","severity":1,"message":"632","line":116,"column":15,"nodeType":"633","endLine":119,"endColumn":16},{"ruleId":"631","severity":1,"message":"632","line":127,"column":15,"nodeType":"633","endLine":130,"endColumn":16},{"ruleId":"631","severity":1,"message":"632","line":138,"column":15,"nodeType":"633","endLine":141,"endColumn":16},{"ruleId":"631","severity":1,"message":"632","line":149,"column":15,"nodeType":"633","endLine":152,"endColumn":16},{"ruleId":"631","severity":1,"message":"632","line":14,"column":18,"nodeType":"633","endLine":14,"endColumn":63},{"ruleId":"631","severity":1,"message":"632","line":15,"column":18,"nodeType":"633","endLine":15,"endColumn":63},{"ruleId":"631","severity":1,"message":"632","line":16,"column":18,"nodeType":"633","endLine":16,"endColumn":63},{"ruleId":"631","severity":1,"message":"632","line":24,"column":16,"nodeType":"633","endLine":24,"endColumn":61},{"ruleId":"631","severity":1,"message":"632","line":32,"column":17,"nodeType":"633","endLine":32,"endColumn":62},{"ruleId":"631","severity":1,"message":"632","line":40,"column":16,"nodeType":"633","endLine":40,"endColumn":61},{"ruleId":"631","severity":1,"message":"632","line":41,"column":18,"nodeType":"633","endLine":41,"endColumn":63},{"ruleId":"631","severity":1,"message":"632","line":42,"column":18,"nodeType":"633","endLine":42,"endColumn":63},{"ruleId":"634","severity":1,"message":"657","line":126,"column":36,"nodeType":"636","messageId":"658","endLine":126,"endColumn":38},{"ruleId":"634","severity":1,"message":"657","line":141,"column":33,"nodeType":"636","messageId":"658","endLine":141,"endColumn":35},{"ruleId":"631","severity":1,"message":"632","line":170,"column":15,"nodeType":"633","endLine":170,"endColumn":81},{"ruleId":"631","severity":1,"message":"632","line":178,"column":15,"nodeType":"633","endLine":182,"endColumn":16},{"ruleId":"631","severity":1,"message":"632","line":196,"column":15,"nodeType":"633","endLine":200,"endColumn":16},{"ruleId":"631","severity":1,"message":"632","line":204,"column":15,"nodeType":"633","endLine":204,"endColumn":79},{"ruleId":"631","severity":1,"message":"632","line":208,"column":15,"nodeType":"633","endLine":212,"endColumn":16},{"ruleId":"631","severity":1,"message":"632","line":218,"column":15,"nodeType":"633","endLine":218,"endColumn":81},{"ruleId":"619","severity":1,"message":"661","line":14,"column":3,"nodeType":"621","messageId":"622","endLine":14,"endColumn":18},{"ruleId":"623","severity":1,"message":"643","line":40,"column":6,"nodeType":"625","endLine":40,"endColumn":22,"suggestions":"662"},{"ruleId":"634","severity":1,"message":"638","line":45,"column":29,"nodeType":"636","messageId":"637","endLine":45,"endColumn":31},{"ruleId":"631","severity":1,"message":"632","line":150,"column":21,"nodeType":"633","endLine":150,"endColumn":75},{"ruleId":"631","severity":1,"message":"632","line":198,"column":21,"nodeType":"633","endLine":198,"endColumn":75},{"ruleId":"631","severity":1,"message":"632","line":214,"column":21,"nodeType":"633","endLine":214,"endColumn":75},{"ruleId":"631","severity":1,"message":"632","line":219,"column":25,"nodeType":"633","endLine":219,"endColumn":71},{"ruleId":"631","severity":1,"message":"632","line":224,"column":25,"nodeType":"633","endLine":224,"endColumn":71},{"ruleId":"631","severity":1,"message":"632","line":229,"column":25,"nodeType":"633","endLine":229,"endColumn":71},{"ruleId":"631","severity":1,"message":"632","line":243,"column":19,"nodeType":"633","endLine":243,"endColumn":73},{"ruleId":"631","severity":1,"message":"632","line":282,"column":19,"nodeType":"633","endLine":282,"endColumn":73},{"ruleId":"631","severity":1,"message":"632","line":312,"column":19,"nodeType":"633","endLine":312,"endColumn":73},{"ruleId":"631","severity":1,"message":"632","line":327,"column":19,"nodeType":"633","endLine":327,"endColumn":73},{"ruleId":"631","severity":1,"message":"632","line":332,"column":23,"nodeType":"633","endLine":332,"endColumn":69},{"ruleId":"631","severity":1,"message":"632","line":337,"column":23,"nodeType":"633","endLine":337,"endColumn":69},{"ruleId":"631","severity":1,"message":"632","line":342,"column":23,"nodeType":"633","endLine":342,"endColumn":69},{"ruleId":"631","severity":1,"message":"632","line":354,"column":17,"nodeType":"633","endLine":359,"endColumn":18},{"ruleId":"631","severity":1,"message":"632","line":395,"column":17,"nodeType":"633","endLine":395,"endColumn":72},{"ruleId":"619","severity":1,"message":"663","line":3,"column":24,"nodeType":"621","messageId":"622","endLine":3,"endColumn":35},{"ruleId":"619","severity":1,"message":"664","line":5,"column":3,"nodeType":"621","messageId":"622","endLine":5,"endColumn":12},{"ruleId":"619","severity":1,"message":"665","line":9,"column":7,"nodeType":"621","messageId":"622","endLine":9,"endColumn":20},{"ruleId":"619","severity":1,"message":"666","line":36,"column":8,"nodeType":"621","messageId":"622","endLine":36,"endColumn":20},{"ruleId":"619","severity":1,"message":"667","line":6,"column":3,"nodeType":"621","messageId":"622","endLine":6,"endColumn":13},{"ruleId":"619","severity":1,"message":"668","line":7,"column":3,"nodeType":"621","messageId":"622","endLine":7,"endColumn":16},{"ruleId":"619","severity":1,"message":"666","line":49,"column":8,"nodeType":"621","messageId":"622","endLine":49,"endColumn":20},{"ruleId":"669","severity":1,"message":"670","line":34,"column":13,"nodeType":"633","endLine":34,"endColumn":91},{"ruleId":"631","severity":1,"message":"632","line":49,"column":15,"nodeType":"633","endLine":49,"endColumn":59},{"ruleId":"634","severity":1,"message":"657","line":33,"column":38,"nodeType":"636","messageId":"658","endLine":33,"endColumn":40},{"ruleId":"631","severity":1,"message":"632","line":51,"column":13,"nodeType":"633","endLine":51,"endColumn":61},{"ruleId":"631","severity":1,"message":"632","line":56,"column":13,"nodeType":"633","endLine":56,"endColumn":61},{"ruleId":"631","severity":1,"message":"632","line":61,"column":13,"nodeType":"633","endLine":61,"endColumn":61},{"ruleId":"631","severity":1,"message":"632","line":47,"column":13,"nodeType":"633","endLine":47,"endColumn":62},{"ruleId":"634","severity":1,"message":"659","line":17,"column":32,"nodeType":"636","messageId":"658","endLine":17,"endColumn":34},{"ruleId":"631","severity":1,"message":"632","line":14,"column":18,"nodeType":"633","endLine":14,"endColumn":63},{"ruleId":"631","severity":1,"message":"632","line":15,"column":18,"nodeType":"633","endLine":15,"endColumn":63},{"ruleId":"631","severity":1,"message":"632","line":16,"column":18,"nodeType":"633","endLine":16,"endColumn":63},{"ruleId":"631","severity":1,"message":"632","line":24,"column":16,"nodeType":"633","endLine":24,"endColumn":61},{"ruleId":"631","severity":1,"message":"632","line":32,"column":17,"nodeType":"633","endLine":32,"endColumn":62},{"ruleId":"631","severity":1,"message":"632","line":40,"column":16,"nodeType":"633","endLine":40,"endColumn":61},{"ruleId":"631","severity":1,"message":"632","line":41,"column":18,"nodeType":"633","endLine":41,"endColumn":63},{"ruleId":"631","severity":1,"message":"632","line":42,"column":18,"nodeType":"633","endLine":42,"endColumn":63},{"ruleId":"634","severity":1,"message":"657","line":126,"column":36,"nodeType":"636","messageId":"658","endLine":126,"endColumn":38},{"ruleId":"634","severity":1,"message":"657","line":141,"column":33,"nodeType":"636","messageId":"658","endLine":141,"endColumn":35},{"ruleId":"631","severity":1,"message":"632","line":170,"column":15,"nodeType":"633","endLine":170,"endColumn":81},{"ruleId":"631","severity":1,"message":"632","line":178,"column":15,"nodeType":"633","endLine":182,"endColumn":16},{"ruleId":"631","severity":1,"message":"632","line":196,"column":15,"nodeType":"633","endLine":200,"endColumn":16},{"ruleId":"631","severity":1,"message":"632","line":204,"column":15,"nodeType":"633","endLine":204,"endColumn":79},{"ruleId":"631","severity":1,"message":"632","line":208,"column":15,"nodeType":"633","endLine":212,"endColumn":16},{"ruleId":"631","severity":1,"message":"632","line":218,"column":15,"nodeType":"633","endLine":218,"endColumn":81},{"ruleId":"619","severity":1,"message":"671","line":11,"column":10,"nodeType":"621","messageId":"622","endLine":11,"endColumn":19},{"ruleId":"619","severity":1,"message":"672","line":11,"column":21,"nodeType":"621","messageId":"622","endLine":11,"endColumn":32},{"ruleId":"619","severity":1,"message":"673","line":31,"column":9,"nodeType":"621","messageId":"622","endLine":31,"endColumn":18},{"ruleId":"631","severity":1,"message":"632","line":88,"column":15,"nodeType":"633","endLine":91,"endColumn":16},{"ruleId":"631","severity":1,"message":"632","line":110,"column":15,"nodeType":"633","endLine":113,"endColumn":16},{"ruleId":"631","severity":1,"message":"632","line":121,"column":15,"nodeType":"633","endLine":124,"endColumn":16},{"ruleId":"631","severity":1,"message":"632","line":132,"column":15,"nodeType":"633","endLine":135,"endColumn":16},{"ruleId":"631","severity":1,"message":"632","line":143,"column":15,"nodeType":"633","endLine":146,"endColumn":16},{"ruleId":"619","severity":1,"message":"674","line":7,"column":6,"nodeType":"621","messageId":"622","endLine":7,"endColumn":16},{"ruleId":"619","severity":1,"message":"646","line":1,"column":21,"nodeType":"621","messageId":"622","endLine":1,"endColumn":30},"@typescript-eslint/no-unused-vars","'withMovies' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispach'. Either include it or remove the dependency array.","ArrayExpression",["675"],"'useState' is defined but never used.","'useSelector' is defined but never used.","'selectedSelector' is defined but never used.","'AppStateType' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","Array.prototype.filter() expects a return value from arrow function.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["676"],["677"],"'useEffect' is defined but never used.","Array.prototype.find() expects a return value from arrow function.","'PopularType' is defined but never used.","'VideoType' is defined but never used.","'MovieList' is defined but never used.","'FC' is defined but never used.","'PropsMovieComponentstype' is defined but never used.",["678"],["679"],["680"],"'makeStyles' is defined but never used.","Array.prototype.filter() expects a value to be returned at the end of arrow function.","expectedAtEnd","Array.prototype.find() expects a value to be returned at the end of arrow function.","'percent' is assigned a value but never used.","'getSelectedLang' is defined but never used.",["681"],"'getLangsApi' is defined but never used.","'LangsType' is defined but never used.","'LANG_SELECTED' is assigned a value but never used.","'GetStateType' is defined but never used.","'DetailType' is defined but never used.","'NowPlayngType' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'crewStaff' is defined but never used.","'crewStaffTV' is defined but never used.","'crew' is assigned a value but never used.","'SeasonType' is defined but never used.",{"desc":"682","fix":"683"},{"desc":"684","fix":"685"},{"desc":"684","fix":"686"},{"desc":"684","fix":"687"},{"desc":"684","fix":"688"},{"desc":"684","fix":"689"},{"desc":"690","fix":"691"},"Update the dependencies array to be: [dispach]",{"range":"692","text":"693"},"Update the dependencies array to be: [dispatch]",{"range":"694","text":"695"},{"range":"696","text":"695"},{"range":"697","text":"695"},{"range":"698","text":"695"},{"range":"699","text":"695"},"Update the dependencies array to be: [dispatch, selectedOption]",{"range":"700","text":"701"},[952,954],"[dispach]",[784,786],"[dispatch]",[799,801],[778,780],[776,778],[760,762],[1441,1457],"[dispatch, selectedOption]"]